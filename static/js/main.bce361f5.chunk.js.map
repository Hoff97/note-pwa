{"version":3,"sources":["util/types.ts","util/plugin.ts","util/util.ts","components/renderers/Date.tsx","components/renderers/Link.tsx","components/checkbox/checkbox.tsx","components/renderers/ListItem.tsx","components/mdWrap/MarkDownWrap.tsx","util/strs.ts","util/emitter.ts","network/login.service.ts","network/entity.service.ts","util/note.ts","network/sync.service.ts","components/note/Note.tsx","components/note-preview/NotePreview.tsx","components/home/Home.tsx","components/login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","toNetworkData","data","copy","id","timestamp","fromNetworkData","synchronized","dates","Parser","this","tokenizers","prototype","inlineTokenizers","methods","inlineMethods","date","tokenizeDate","splice","indexOf","eat","value","silent","match","exec","startsWith","type","year","parseInt","month","day","children","notInLink","locator","fromIndex","formatNumber","number","formatDate","getFullYear","getMonth","getDate","DateComponent","Date","props","className","content","onClickDay","setDate","sourcePosition","eventToggle","React","isPreviewLink","length","href","Link","cardSize","showGraphic","maxLine","minLine","url","maxCacheAge","CheckBox","checked","onChange","labels","ev","isNoLabel","child","key","ListItem","undefined","lineIndex","start","line","filter","lists","push","toggleCheckbox","defaultListItem","generateCheckbox","MarkDownWrap","renderParagraph","state","setState","lines","split","replace","setValue","join","before","slice","offset","after","end","format","source","renderers","listItem","link","paragraph","sp","rawSourcePos","plugins","listRegExp","Emitter","subscribers","subscriber","LoginService","token","localStorage","getItem","localStorageKey","loggedInEv","username","password","fetch","urlPrefix","method","headers","body","JSON","stringify","response","json","setItem","emit","loginService","EntityService","name","getToken","map","x","entity","noteService","entityService","subscribe","getEntities","then","entities","parse","loggedIn","fetchEntities","localEntities","getEntitiesLocal","entMap","makeMap","localEntMap","newEnts","localNewEnts","updates","localEnt","localDate","remoteDate","e","ent","localNew","createEntity","localUp","updateEntity","storeEntities","uuidv4","genId","toISOString","created","i","deleteEntity","notes","ret","NoteComponent","input","editorRef","commands","getDefaultCommands","icon","_getIconFromProvider","faEyeDropper","color","getIconFromProvider","style","faCircle","execute","api","setColor","note","markdown","tab","editTitle","loaded","noteId","params","getEntity","window","location","search","paramTab","URLSearchParams","get","document","getElementsByClassName","addEventListener","handleKeyPress","bind","setTimeout","handleEnter","preventDefault","handleTab","position","target","selectionStart","currLine","str","currentLine","lineStart","shiftKey","newVal","selectionEnd","prevLine","previousLine","nativeEvent","toggleEdit","history","stopPropagation","goBack","Array","isArray","current","textArea","textAreaRef","dispatchEvent","KeyboardEvent","bubbles","text","Promise","resolve","preview","onClick","insertDate","title","val","setName","onKeyUp","editKeyUp","autoFocus","faPen","faArrowLeft","maxHeight","innerHeight","minHeight","Math","min","max","render","selectedTab","onTabChange","setTab","generateMarkdownPreview","classes","suggestionTriggerCharacters","loadSuggestions","ref","minEditorHeight","maxEditorHeight","NotePreview","editClicked","deleteClicked","delete","faTrash","edit","faEdit","Component","Home","context","choosing","logout","sortedNotes","sort","a","b","newNote","faPlus","faCheckSquare","faSignOutAlt","login","faUser","toNote","deleteNote","Login","register","email","pw","error","onSubmit","placeholder","App","basename","process","path","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","StrictMode","getElementById","URL","origin","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bce361f5.chunk.js","sourcesContent":["export type Color = 'white' | 'red' | 'green' | 'blue' | 'orange';\n\nexport const colors: Color[] = ['white', 'red', 'green', 'blue', 'orange'];\n\nexport interface HasId {\n    id: string;\n}\n\nexport interface HasTimestamp {\n    timestamp: string;\n}\n\nexport interface HasIdTimestamp extends HasId, HasTimestamp {\n    synchronized: boolean;\n}\n\nexport interface Note extends HasIdTimestamp {\n    name: string;\n    markdown: string;\n    color: Color;\n}\n\nexport type NoteType = 'empty' | 'checklist';\n\nexport type WithoutIdTimestamp<T> = Omit<Omit<Omit<T, 'id'>, 'timestamp'>, 'synchronized'>;\n\nexport interface NetworkData<T extends HasIdTimestamp> {\n    id: string;\n    timestamp: string;\n    data: WithoutIdTimestamp<T>;\n}\n\nexport function toNetworkData<T extends HasIdTimestamp>(data: T): NetworkData<T> {\n    const copy = {\n        ...data\n    };\n    delete copy.id;\n    delete copy.timestamp;\n\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        data: copy\n    };\n}\n\nexport function fromNetworkData<T extends HasIdTimestamp>(data: NetworkData<T>): T {\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        synchronized: true,\n        ...data.data\n    } as any;\n}\n\nexport interface NetworkNote extends NetworkData<Note> {\n\n};\n\nexport type NewNote = WithoutIdTimestamp<Note>;","export function dates() {\n    // @ts-ignore\n    var Parser = this.Parser\n    var tokenizers = Parser.prototype.inlineTokenizers\n    var methods = Parser.prototype.inlineMethods\n\n    // Add an inline tokenizer (defined in the following example).\n    tokenizers.date = tokenizeDate\n\n    // Run it just before `text`.\n    methods.splice(methods.indexOf('text'), 0, 'date')\n}\n\ntokenizeDate.notInLink = true\ntokenizeDate.locator = locateDate\n\nfunction tokenizeDate(eat: any, value: string, silent: boolean) {\n    const match = /@date\\(([0-9]{4}),([0-9]{2}),([0-9]{2})\\)/.exec(value);\n\n\n    if (match && value.startsWith(match[0])) {\n        if (silent) {\n            return true;\n        }\n\n        return eat(match[0])({\n            type: 'date',\n            year: parseInt(match[1]),\n            month: parseInt(match[2]) - 1,\n            day: parseInt(match[3]),\n            children: []\n        });\n    }\n}\n\nfunction locateDate(value: string, fromIndex: number) {\n    return value.indexOf('@', fromIndex);\n}","export function formatNumber(number: number) {\n    if (number < 10) {\n        return `0${number}`;\n    }\n    return number;\n}\n\nexport function formatDate(date: Date) {\n    return `@date(${date.getFullYear()},${formatNumber(date.getMonth() + 1)},${formatNumber(date.getDate())})`;\n}","import * as React from 'react';\n\nimport Tooltip from 'react-tooltip-lite';\n\nimport Calendar from 'react-calendar';\n\nimport './date.css';\nimport { formatNumber } from '../../util/util';\n\nimport 'react-calendar/dist/Calendar.css';\n\nexport class DateComponent extends React.Component<any, {}> {\n    render() {\n        const date = new Date(this.props.year, this.props.month, this.props.day);\n\n        return (\n            <span className=\"date\">\n                <Tooltip\n                        content={\n                            <Calendar\n                                value={date}\n                                onClickDay={date => this.props.setDate(date, this.props.sourcePosition)}/>\n                        }\n                        eventToggle=\"onClick\">\n                    <span>{formatNumber(this.props.day)}.{formatNumber(this.props.month + 1)}.{this.props.year}</span>\n                </Tooltip>\n            </span>\n        );\n    }\n}","import * as React from 'react';\n\nimport { ReactTinyLink } from 'react-tiny-link';\n\nexport function isPreviewLink(props: any) {\n    return props.children.length === 0 ||\n        (props.children.length === 1 && props.children[0].props.children === props.href);\n}\n\nexport function Link(props: any) {\n    if (isPreviewLink(props)) {\n        return (\n            <div className=\"react-tiny-link-wrap\">\n                <ReactTinyLink\n                    cardSize=\"small\"\n                    showGraphic={true}\n                    maxLine={2}\n                    minLine={1}\n                    url={props.href}\n                    maxCacheAge={1000*1000*1000}\n                    />\n            </div>\n        );\n    } else {\n        return (\n            <a href={props.href}>\n                {props.children}\n            </a>\n        );\n    }\n}","import * as React from 'react';\n\nimport './style.css';\n\ninterface CheckboxProps {\n    checked: boolean;\n    onChange: (change: React.ChangeEvent<HTMLInputElement>) => void;\n    labels: JSX.Element[];\n}\n\nexport function CheckBox({ checked, onChange, labels }: CheckboxProps) {\n    return (\n        <label className=\"checkbox-container\">{labels}\n            <input type=\"checkbox\" checked={checked}\n                onChange={ev => onChange(ev)}/>\n            <span className=\"checkbox-checkmark\"></span>\n        </label>\n    );\n}","import * as React from 'react';\n\nimport { isPreviewLink } from \"./Link\";\n\nimport {listItem as defaultListItem} from 'react-markdown/lib/renderers';\nimport { CheckBox } from '../checkbox/checkbox';\n\nfunction isNoLabel(child: any) {\n    return child.key.startsWith('list') || (child.key.startsWith('link') && isPreviewLink(child.props));\n}\n\nexport function ListItem(props: any) {\n    if (props.checked !== null && props.checked !== undefined) {\n        const lineIndex = props.sourcePosition.start.line - 1;\n        let labels = props.children.filter((child: any) => !isNoLabel(child));\n        let lists = props.children.filter((child: any) => isNoLabel(child));\n\n        if (labels.length === 0) {\n            labels.push((\n                <span key={`placeholder-${props.sourcePosition.start.line}`}>\n                    &nbsp;\n                </span>\n            ));\n        }\n\n        return (\n            <li>\n                <CheckBox\n                    checked={props.checked}\n                    onChange={ev => props.toggleCheckbox(ev, lineIndex, props)}\n                    labels={labels}/>\n                {lists}\n            </li>\n        );\n    }\n    return defaultListItem(props);\n  }","import * as React from 'react';\n\nimport ReactMarkdown from 'react-markdown';\n\nimport './style.css';\nimport { dates } from '../../util/plugin';\n\nimport 'react-calendar/dist/Calendar.css';\n\nimport { DateComponent } from '../renderers/Date';\nimport { formatDate } from '../../util/util';\nimport { Link } from '../renderers/Link';\nimport { ListItem } from '../renderers/ListItem';\n\ninterface MDState {\n    value: string;\n}\n\ninterface MDProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nfunction generateCheckbox(checked: boolean) {\n    return checked ? '- [x]' : '- [ ]';\n}\n\ntype ChangeInput = React.ChangeEvent<HTMLInputElement>;\n\nexport class MarkDownWrap extends React.Component<MDProps, MDState> {\n    renderParagraph = (props: any) => {\n        return (\n            <>\n                {props.children}<br/>\n            </>\n        );\n    }\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            value: props.value\n        };\n    }\n\n    setValue(value: string) {\n        this.setState({\n            value\n        });\n\n        this.props.onChange(value);\n    }\n\n    toggleCheckbox(ev: ChangeInput, lineIndex: number, props: any) {\n        const lines = this.state.value.split('\\n');\n\n        lines[lineIndex] = lines[lineIndex].replace(\n            generateCheckbox(props.checked),\n            generateCheckbox(!props.checked)\n        );\n        this.setValue(lines.join('\\n'));\n    }\n\n    setDate(date: Date, sourcePosition: any) {\n        const before = this.state.value.slice(0, sourcePosition.start.offset);\n        const after = this.state.value.slice(sourcePosition.end.offset)\n        const format = formatDate(date);\n\n        this.setValue(before + format + after);\n    }\n\n    render() {\n        return (\n            <ReactMarkdown source={this.state.value}\n                renderers={{\n                    listItem: props => {\n                        return (\n                            <ListItem\n                                toggleCheckbox={(ev: ChangeInput, lineIndex: number, props: any) => this.toggleCheckbox(ev, lineIndex, props)}\n                                {...props}/>\n                        );\n                    },\n                    link: Link,\n                    paragraph: this.renderParagraph,\n                    date: props => {\n                        return (\n                            <DateComponent\n                                setDate={(date: Date, sp: any) => this.setDate(date, sp)}\n                                {...props}/>\n                        );\n                    }\n                }}\n                rawSourcePos={true}\n                plugins={[dates]}/>\n        );\n    }\n}","export function previousLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i > 0) {\n        return lines[i-1];\n    }\n    return undefined;\n}\n\nexport function currentLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i < lines.length) {\n        return lines[i];\n    }\n    return undefined;\n}\n\nexport function lineStart(str: string, position: number): number {\n    const lines = str.split('\\n');\n    let i = 0;\n    let start = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        start += lines[i].length + 1;\n        i += 1;\n    }\n    return start;\n}\n\nexport const listRegExp = /^([\\s>]*)(([-*]|(([0-9]+)\\.))\\s(\\[[ x]\\])?)?/;","type Subscriber<T> = (value: T) => void;\n\nexport class Emitter<T> {\n    private subscribers: Subscriber<T>[] = [];\n\n    public subscribe(subscriber: Subscriber<T>) {\n        this.subscribers.push(subscriber);\n    }\n\n    public emit(value: T) {\n        for (let subscriber of this.subscribers) {\n            subscriber(value);\n        }\n    }\n}","import { Emitter } from \"../util/emitter\";\nimport { urlPrefix } from \"./entity.service\";\n\nexport class LoginService {\n    static localStorageKey = 'token';\n\n    token: string | null = localStorage.getItem(LoginService.localStorageKey);\n\n    loggedInEv = new Emitter<void>();\n\n    public async login(username: string, password: string) {\n        const response = await fetch(`${urlPrefix}/api-token-auth/`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username, password\n            })\n        });\n\n        const json = await response.json();\n        this.token = json.token;\n        localStorage.setItem(LoginService.localStorageKey, json.token);\n\n        this.loggedInEv.emit();\n\n        return this.token;\n    }\n\n    logout() {\n        this.token = null;\n    }\n\n    public async register(username: string, password: string) {\n        const response = await fetch(`${urlPrefix}/api-token-auth/`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username, password\n            })\n        });\n\n        const json = await response.json();\n        this.token = json.token;\n        localStorage.setItem(LoginService.localStorageKey, json.token);\n\n        this.loggedInEv.emit();\n\n        return this.token;\n    }\n\n    loggedIn(): boolean {\n        return !!this.token;\n    }\n\n    getToken(): string | null {\n        return this.token;\n    }\n}\n\nexport const loginService = new LoginService();","import { toNetworkData, fromNetworkData, HasIdTimestamp } from \"../util/types\";\nimport { loginService } from \"./login.service\";\n\nexport const urlPrefix = 'https://detext.haskai.de/syncify/api';\n\nexport class EntityService<T extends HasIdTimestamp> {\n\n    constructor(private name: string) {\n\n    }\n\n    async fetchEntities(): Promise<T[]> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n\n        const json = await response.json();\n        return json.map((x: any) => fromNetworkData(x));\n    }\n\n    async createEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async updateEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/${entity.id}/?tpe=${this.name}`, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async deleteEntity(id: string): Promise<void> {\n        await fetch(`${urlPrefix}/entity/${id}/?tpe=${this.name}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n    }\n}","import { EntityService } from \"../network/entity.service\";\nimport { SyncService } from \"../network/sync.service\";\nimport { Note } from \"./types\";\n\nconst noteNetworkService = new EntityService<Note>('note');\nexport const noteService = new SyncService<Note>(noteNetworkService, 'note');","import { HasIdTimestamp, WithoutIdTimestamp } from \"../util/types\";\nimport { EntityService } from \"./entity.service\";\nimport { loginService } from \"./login.service\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class SyncService<T extends HasIdTimestamp> {\n    constructor(private entityService: EntityService<T>, private name: string){\n        loginService.loggedInEv.subscribe(() => {\n            this.getEntities().then(x => {\n            });\n        });\n    }\n\n    storeEntities(entities: T[]) {\n        localStorage.setItem(this.name, JSON.stringify(entities));\n    }\n\n    getEntitiesLocal(): T[] {\n        let entities = localStorage.getItem(this.name);\n        if (entities === null) {\n            entities = \"[]\";\n        }\n        return JSON.parse(entities);\n    }\n\n    async getEntities(): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                let entities = await this.entityService.fetchEntities();\n\n                const localEntities = this.getEntitiesLocal();\n\n                const entMap = this.makeMap(entities);\n                const localEntMap = this.makeMap(localEntities);\n\n                const newEnts: T[] = [];\n                const localNewEnts: T[] = [];\n                const updates: T[] = [];\n\n                for (let localEnt of localEntities) {\n                    if (entMap[localEnt.id] !== undefined) {\n                        const localDate = new Date(localEnt.timestamp);\n                        const remoteDate = new Date(entMap[localEnt.id].timestamp);\n                        if (localDate > remoteDate) {\n                            updates.push(localEnt);\n                        } else {\n                            newEnts.push(entMap[localEnt.id]);\n                        }\n                    } else if (!localEnt.synchronized) {\n                        localNewEnts.push(localEnt);\n                    }\n                }\n\n                for (let ent of entities) {\n                    if (localEntMap[ent.id] === undefined) {\n                        newEnts.push(ent);\n                    }\n                }\n\n                for (let localNew of localNewEnts) {\n                    await this.entityService.createEntity(localNew);\n                }\n                for (let localUp of updates) {\n                    await this.entityService.updateEntity(localUp);\n                }\n\n                entities = [\n                    ...newEnts,\n                    ...localNewEnts,\n                    ...updates\n                ];\n\n                this.storeEntities(entities);\n                return entities;\n            } catch (e) {\n            }\n        }\n        return this.getEntitiesLocal();\n    }\n\n    genId(): string {\n        return uuidv4();\n    }\n\n    async createEntity(entity: WithoutIdTimestamp<T>): Promise<string> {\n        const copy: T = {\n            id: this.genId(),\n            timestamp: (new Date()).toISOString(),\n            ...entity\n        } as any;\n\n        let created;\n        if (loginService.loggedIn()) {\n            try {\n                created = await this.entityService.createEntity(copy);\n            } catch (e) {\n                created = copy;\n            }\n        } else {\n            created = copy;\n        }\n\n        const localEntities = this.getEntitiesLocal();\n        localEntities.push(created);\n\n        this.storeEntities(localEntities);\n\n        return created.id;\n    }\n\n    async updateEntity(entity: T) {\n        entity.timestamp = (new Date()).toISOString();\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.updateEntity(entity);\n            } catch (e) {\n            }\n        }\n\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == entity.id) {\n                entities[i] = entity;\n                break;\n            }\n        }\n\n        this.storeEntities(entities);\n    }\n\n    getEntity(id: string): T | undefined {\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == id) {\n                return entities[i];\n            }\n        }\n\n        return undefined;\n    }\n\n    async deleteEntity(id: string): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.deleteEntity(id);\n            } catch {\n            }\n        }\n        const notes = this.getEntitiesLocal();\n\n        for (let i = 0; i < notes.length; i++) {\n            // eslint-disable-next-line\n            if (notes[i].id == id) {\n                notes.splice(i, 1);\n                break;\n            }\n        }\n\n        this.storeEntities(notes);\n\n        return notes;\n    }\n\n    private makeMap(entities: T[]): {[key: string]: T} {\n        const ret: {[key: string]: T} = {};\n        for (let entity of entities) {\n            ret[entity.id] = entity;\n        }\n        return ret;\n    }\n}","import * as React from 'react';\n\nimport ReactMde, { commands, TextState, TextApi } from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { Note, colors, Color } from '../../util/types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faEyeDropper, faCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\n\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { previousLine, listRegExp, currentLine, lineStart } from '../../util/strs';\nimport { CommandGroup, GetIcon, Suggestion } from 'react-mde/lib/definitions/types';\nimport { noteService } from '../../util/note';\n\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Route } from 'react-router-dom';\nimport { Tab } from 'react-mde/lib/definitions/types/Tab';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { formatDate } from '../../util/util';\n\ninterface NoteState {\n    note: Note;\n    tab: Tab;\n    editTitle: boolean;\n    loaded: boolean;\n}\n\nexport function colorClass(color: Color) {\n    return color;\n}\n\nexport class NoteComponent extends React.Component<{}, NoteState> {\n    input?: HTMLTextAreaElement;\n\n    editorRef: React.RefObject<ReactMde>;\n\n    commands: CommandGroup[] = [\n        ...commands.getDefaultCommands(),\n        {\n            commands: [\n                {\n                    name: 'Test',\n                    icon: (_getIconFromProvider: GetIcon) => (\n                        <FontAwesomeIcon icon={faEyeDropper}/>\n                    ),\n                    children: colors.map(color => (\n                        {\n                            name: 'C1',\n                            icon: (getIconFromProvider: GetIcon) => (\n                                <span style={{color}}>\n                                    <FontAwesomeIcon icon={faCircle}/>\n                                </span>\n                            ),\n                            execute: (state: TextState, api: TextApi) => {\n                                this.setColor(color);\n                            }\n                        }))\n                }\n            ]\n        }\n    ];\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            note: {\n                markdown: '',\n                id: '',\n                name: 'Placeholder',\n                color: 'white',\n                timestamp: '',\n                synchronized: false\n            },\n            tab: 'write',\n            editTitle: false,\n            loaded: false\n        };\n\n        this.editorRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const noteId = (this.props as any).match.params.noteId;\n\n        const note = noteService.getEntity(noteId);\n\n        let tab: Tab = 'write';\n        if (window.location.search) {\n            const urlParams = new URLSearchParams(window.location.search);\n            const paramTab = urlParams.get('tab');\n            if (paramTab === 'write' || paramTab === 'preview') {\n                tab = paramTab;\n            }\n        }\n\n        if (note) {\n            this.setState({\n                note,\n                tab,\n                loaded: true\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        let input = document.getElementsByClassName('mde-text');\n        if (input.length > 0 && !this.input) {\n            this.input = input[0] as HTMLTextAreaElement;\n\n            this.input.addEventListener('keydown', this.handleKeyPress.bind(this));\n        }\n    }\n\n    handleKeyPress(ev: KeyboardEvent) {\n        if (ev.key === 'Enter') {\n            setTimeout(() => {\n                this.handleEnter(ev);\n            }, 10);\n        } else if (ev.key === 'Tab') {\n            ev.preventDefault();\n            setTimeout(() => {\n                this.handleTab(ev);\n            }, 10);\n        }\n    }\n\n    handleTab(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const currLine = currentLine(note, position);\n        if (currLine) {\n            const match = currLine.match(listRegExp);\n            if (match) {\n                const start = lineStart(note, position);\n                if (ev.shiftKey) {\n                    if (match[1].length >= 4) {\n                        const newVal = [note.slice(0, start), note.slice(start+4)].join('');\n                        this.setValue(newVal);\n                        setTimeout(() => {\n                            (ev.target as any).selectionStart =  position - 4;\n                            (ev.target as any).selectionEnd =  position - 4;\n                        }, 0);\n                    }\n                } else {\n                    const newVal = [note.slice(0, start), '    ', note.slice(start)].join('');\n                    this.setValue(newVal);\n                    setTimeout(() => {\n                        (ev.target as any).selectionStart =  position + 4;\n                        (ev.target as any).selectionEnd =  position + 4;\n                    }, 0);\n                }\n            }\n        }\n    }\n\n    handleEnter(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const prevLine = previousLine(note, position);\n        if (prevLine) {\n            const match = prevLine.match(listRegExp);\n            if (match) {\n                let str = match[1];\n                if (match[5] !== undefined) {\n                    str += `${parseInt(match[5]) + 1}. `\n                } else if (match[3] !== undefined) {\n                    str += `${match[3]} `;\n                }\n                if (match[6]) {\n                    str += `${match[6]} `;\n                }\n                const newVal = [note.slice(0, position), str, note.slice(position)].join('');\n\n                this.setValue(newVal);\n                setTimeout(() => {\n                    (ev.target as any).selectionStart =  position + str.length;\n                    (ev.target as any).selectionEnd =  position + str.length;\n                }, 0);\n            }\n        }\n    }\n\n    setValue(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                markdown: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            markdown: value\n        });\n    }\n\n    setTab(tab: Tab) {\n        this.setState({\n            tab\n        });\n    }\n\n    setColor(color: Color) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                color\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            color\n        });\n    }\n\n    toggleEdit() {\n        this.setState({\n            editTitle: !this.state.editTitle\n        });\n    }\n\n    setName(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                name: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            name: value\n        });\n    }\n\n    editKeyUp(ev: React.KeyboardEvent) {\n        if (ev.nativeEvent.key === 'Enter') {\n            this.toggleEdit();\n        }\n    }\n\n    goBack(ev: React.MouseEvent, history: any) {\n        ev.stopPropagation();\n        history.goBack();\n    }\n\n    insertDate(date: Date | Date[]) {\n        if (Array.isArray(date)) {\n            date = date[0];\n        }\n\n        if (this.editorRef.current) {\n            const textArea = this.editorRef.current.textAreaRef;\n\n            const end = textArea.selectionStart;\n            let start = end;\n            while (start > 0) {\n                if (this.state.note.markdown[start] === '@') {\n                    break;\n                }\n                start--;\n            }\n            const before = this.state.note.markdown.slice(0, start);\n            const after = this.state.note.markdown.slice(end);\n            const format = formatDate(date) + ' ';\n            this.setValue(before + format + after);\n\n            setTimeout(() => {\n                textArea.selectionStart = before.length + format.length;\n                textArea.selectionEnd = before.length + format.length;\n                textArea.dispatchEvent(new KeyboardEvent('keydown', {\n                    bubbles: true,\n                    key: 'Escape'\n                }));\n            }, 10);\n        }\n    }\n\n    loadSuggestions(text: string): Promise<Suggestion[]> {\n        if (text.length === 0) {\n            return Promise.resolve([\n                {\n                    preview: (\n                        <div onClick={ev => ev.stopPropagation()}>\n                            <Calendar\n                                onChange={date => this.insertDate(date)}/>\n                        </div>\n                    ),\n                    value: '('\n                }\n            ]);\n        }\n        return Promise.resolve([]);\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return (<></>);\n        }\n\n        let title: any;\n        if (!this.state.editTitle) {\n            title = (history: any) => (\n                <div className=\"note-title\" onClick={() => this.toggleEdit()}>\n                    <button className=\"pure-button\" onClick={ev => this.goBack(ev, history)}>\n                        <FontAwesomeIcon icon={faArrowLeft}/>\n                    </button>\n                    <div className=\"edit-region\">\n                        {this.state.note.name}\n                        <span className=\"edit\">\n                            <FontAwesomeIcon icon={faPen}/>\n                        </span>\n                    </div>\n                </div>\n            );\n        } else {\n            title = (history: any) => (\n                <div className=\"note-title\">\n                    <input value={this.state.note.name}\n                        onChange={val => this.setName(val.target.value)}\n                        onKeyUp={ev => this.editKeyUp(ev)}\n                        autoFocus={true}\n                        className=\"editName\"/>\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            )\n        }\n\n        const lines = this.state.note.markdown.split('\\n').length;\n\n        const maxHeight = window.innerHeight - 200;\n        const minHeight = Math.min(maxHeight, Math.max(300, lines*22));\n\n        return (\n            <Route render={({ history }) => (\n                <div>\n                    {title(history)}\n                    <ReactMde\n                        value={this.state.note.markdown}\n                        onChange={ev => this.setValue(ev)}\n                        selectedTab={this.state.tab}\n                        onTabChange={ev => this.setTab(ev)}\n                        generateMarkdownPreview={markdown =>\n                            Promise.resolve(\n                                <MarkDownWrap\n                                    value={markdown}\n                                    onChange={value => this.setValue(value)}/>\n                            )\n                        }\n                        commands={this.commands}\n                        classes={{\n                            textArea: colorClass(this.state.note.color),\n                            preview: colorClass(this.state.note.color)\n                        }}\n                        suggestionTriggerCharacters={['@']}\n                        loadSuggestions={(text: string) => this.loadSuggestions(text)}\n                        ref={this.editorRef}\n                        minEditorHeight={minHeight}\n                        maxEditorHeight={maxHeight}\n                    />\n                </div>\n            )}/>\n        );\n    }\n}","import React from 'react';\n\nimport './style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faEdit } from '@fortawesome/free-solid-svg-icons'\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { colorClass } from '../note/Note';\nimport { Color } from '../../util/types';\nimport { noteService } from '../../util/note';\n\ninterface NotePreviewProps {\n    id: string;\n    deleteClicked: (id: string) => void;\n    editClicked: (id: string) => void;\n}\n\ninterface NotePreviewState {\n    markdown: string;\n    name: string;\n    color: Color;\n}\n\nexport class NotePreview extends React.Component<NotePreviewProps, NotePreviewState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            markdown: '',\n            name: '',\n            color: 'white'\n        };\n\n        const note = noteService.getEntity(this.props.id);\n\n        if (note) {\n            this.state = {\n                markdown: note.markdown,\n                name: note.name,\n                color: note.color\n            };\n        }\n    }\n\n    edit(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.editClicked(this.props.id);\n    }\n\n    delete(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.deleteClicked(this.props.id);\n    }\n\n    render() {\n        return (\n            <div className={`preview ${colorClass(this.state.color)}`}>\n                <div className=\"title\">\n                    {this.state.name}\n                    <span className=\"delete\" onClick={ev => this.delete(ev)}>\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </span>\n                    <span className=\"edit-preview\" onClick={ev => this.edit(ev)}>\n                        <FontAwesomeIcon icon={faEdit}/>\n                    </span>\n                </div>\n                <MarkDownWrap\n                    value={this.state.markdown}\n                    onChange={() => {}}/>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Note, NewNote, NoteType } from '../../util/types';\nimport { Route } from 'react-router-dom';\nimport { NotePreview } from '../note-preview/NotePreview';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faCheckSquare, faUser, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\nimport { noteService } from '../../util/note';\nimport { Tab } from 'react-mde/lib/definitions/types/Tab';\n\ninterface HomeState {\n    notes: Note[];\n    choosing: boolean;\n    loggedIn: boolean;\n}\n\nexport class Home extends React.Component<{}, HomeState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            notes: [],\n            choosing: false,\n            loggedIn: false\n        };\n    }\n\n    componentDidMount(){\n        this.setState({\n            notes: noteService.getEntitiesLocal(),\n            loggedIn: loginService.loggedIn()\n        });\n\n        noteService.getEntities().then(notes => {\n            this.setState({\n                notes\n            });\n        });\n    }\n\n    async newNote(history: any, type: NoteType = 'empty') {\n        const note: NewNote = {\n            name: 'New Note',\n            markdown: type === 'empty' ? '' : '- [ ] ',\n            color: 'white'\n        }\n\n        const id = await noteService.createEntity(note);\n\n        history.push(`/note/${id}?tab=write`);\n    }\n\n    toNote(id: string, history: any, tab: Tab = 'preview') {\n        history.push(`/note/${id}?tab=${tab}`);\n    }\n\n    deleteNote(id: string) {\n        noteService.deleteEntity(id).then(notes => {\n            this.setState({\n                notes: notes\n            });\n        });\n    }\n\n    login(history: any) {\n        history.push(`/login/`)\n    }\n\n    logout() {\n        loginService.logout();\n        this.setState({\n            loggedIn: loginService.loggedIn()\n        });\n    }\n\n    render() {\n        const sortedNotes = this.state.notes.sort((a, b) => {\n            return new Date(a.timestamp) > new Date(b.timestamp) ? -1 : 1;\n        });\n\n        return <Route render={({ history }) => (\n            <div className=\"home\">\n                <table className=\"home\">\n                    <tbody>\n                        <tr className=\"actions\">\n                            <td className=\"actions\">\n                                <button className=\"pure-button mr-2\" onClick={() => this.newNote(history)}>\n                                    <FontAwesomeIcon icon={faPlus}/>\n                                </button>\n                                <button className=\"pure-button\" onClick={() => this.newNote(history, 'checklist')}>\n                                    <FontAwesomeIcon icon={faCheckSquare}/>\n                                </button>\n                                {!this.state.loggedIn ? (\n                                    <button className=\"pure-button login\" onClick={() => this.login(history)}>\n                                        <FontAwesomeIcon icon={faUser}/>\n                                    </button>\n                                    ) : (\n                                    <button className=\"pure-button logout\" onClick={() => this.logout()}>\n                                        <FontAwesomeIcon icon={faSignOutAlt}/>\n                                    </button>\n                                    )\n                                }\n                            </td>\n                        </tr>\n                        {sortedNotes.map(note => {\n                            return <tr className=\"note\" key={note.id}>\n                                <td className=\"note\" onClick={() => this.toNote(note.id, history)}>\n                                    <NotePreview id={note.id}\n                                        deleteClicked={id => this.deleteNote(id)}\n                                        editClicked={id => this.toNote(id, history, 'write')}/>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )} />;\n    }\n}","import * as React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {  faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\ninterface LoginState {\n    error?: string;\n    register: boolean;\n}\n\nexport class Login extends React.Component<{}, LoginState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            register: false\n        };\n    }\n\n    login(history: any, ev: React.FormEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        const email = (ev.target as any)[1].value;\n        const pw = (ev.target as any)[2].value;\n\n        if (this.state.register) {\n            const pwr = (ev.target as any)[3].value;\n\n            if (pw === pwr) {\n                loginService.register(email, pw).then(token => {\n                    if (token !== undefined) {\n                        history.push(`/`);\n                    } else {\n                        this.setState({\n                            error: 'Could not log in'\n                        });\n                    }\n                });\n            } else {\n                this.setState({\n                    error: 'Passwords do not match'\n                });\n            }\n        } else {\n            loginService.login(email, pw).then(token => {\n                if (token !== undefined) {\n                    history.push(`/`);\n                } else {\n                    this.setState({\n                        error: 'Could not log in'\n                    });\n                }\n            });\n        }\n    }\n\n    toggleRegister() {\n        this.setState({\n            register: !this.state.register\n        });\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"login\">\n                <button className=\"pure-button\" onClick={() => history.goBack()}>\n                    <FontAwesomeIcon icon={faArrowLeft}/>\n                </button>\n                <form className=\"pure-form\"\n                        onSubmit={ev => this.login(history, ev)}>\n                    <fieldset>\n                        <legend>Login</legend>\n\n                        <input type=\"username\" placeholder=\"Username\"/>\n                        <input type=\"password\" placeholder=\"Password\"/>\n                        {this.state.register ?\n                            <input type=\"password\" placeholder=\"Repeat Password\"/> :\n                            <span></span>\n                        }\n\n                        <button type=\"submit\" className=\"pure-button pure-button-primary\">\n                            {this.state.register ? 'Register' : 'Sign in'}\n                        </button>\n\n                        {/*<a onClick={() => this.toggleRegister()}\n                            className=\"ml-1\">\n                            {this.state.register ? 'Sign in' : 'Register'}\n                        </a>*/}\n\n                        {this.state.error ? this.state.error : ''}\n                    </fieldset>\n                </form>\n            </div>\n        )} />;\n    }\n}","import React from 'react';\nimport { NoteComponent } from './components/note/Note';\n\nimport 'purecss/build/base-min.css';\nimport 'purecss/build/buttons-min.css';\nimport 'purecss/build/grids-responsive-min.css';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Home } from './components/home/Home';\nimport { Login } from './components/login/Login';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <div className=\"pure-g center\">\n        <div className=\"pure-u-1 pure-u-md-1-5\">\n        </div>\n        <div className=\"pure-u-1 pure-u-md-3-5\">\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route path=\"/note/:noteId\" component={NoteComponent}>\n              </Route>\n              <Route path=\"/login/\">\n                <Login />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
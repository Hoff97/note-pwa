{"version":3,"sources":["util/types.ts","components/checkbox/checkbox.tsx","components/mdWrap/MarkDownWrap.tsx","util/strs.ts","util/emitter.ts","network/login.service.ts","network/entity.service.ts","util/note.ts","network/sync.service.ts","components/note/Note.tsx","components/note-preview/NotePreview.tsx","components/home/Home.tsx","components/login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","toNetworkData","data","copy","id","timestamp","fromNetworkData","synchronized","CheckBox","checked","onChange","labels","className","type","ev","generateCheckbox","isNoLabel","child","key","startsWith","props","children","length","MarkDownWrap","renderListItem","undefined","lineIndex","sourcePosition","start","line","filter","lists","push","toggleCheckbox","defaultListItem","renderLink","cardSize","showGraphic","maxLine","minLine","url","href","renderParagraph","state","value","this","setState","lines","split","replace","setValue","join","source","renderers","listItem","link","paragraph","rawSourcePos","React","listRegExp","Emitter","subscribers","subscriber","LoginService","token","localStorage","getItem","localStorageKey","loggedInEv","username","password","fetch","urlPrefix","method","headers","body","JSON","stringify","response","json","setItem","emit","loginService","EntityService","name","getToken","map","x","entity","noteService","entityService","subscribe","getEntities","then","entities","parse","loggedIn","fetchEntities","localEntities","getEntitiesLocal","entMap","makeMap","localEntMap","newEnts","localNewEnts","updates","localEnt","localDate","Date","remoteDate","e","ent","localNew","createEntity","localUp","updateEntity","storeEntities","uuidv4","genId","toISOString","created","i","deleteEntity","notes","splice","ret","NoteComponent","input","commands","getDefaultCommands","icon","getIconFromProvider","faEyeDropper","color","style","faCircle","execute","api","setColor","note","markdown","tab","editTitle","noteId","match","params","getEntity","window","location","search","paramTab","URLSearchParams","get","document","getElementsByClassName","addEventListener","handleKeyPress","bind","setTimeout","handleEnter","preventDefault","handleTab","position","target","selectionStart","currLine","str","currentLine","lineStart","shiftKey","newVal","slice","selectionEnd","prevLine","previousLine","parseInt","nativeEvent","toggleEdit","history","stopPropagation","goBack","title","val","setName","onKeyUp","editKeyUp","autoFocus","faPen","onClick","faArrowLeft","render","selectedTab","onTabChange","setTab","generateMarkdownPreview","Promise","resolve","classes","textArea","preview","NotePreview","editClicked","deleteClicked","delete","faTrash","edit","faEdit","Component","Home","context","choosing","logout","sortedNotes","sort","a","b","newNote","faPlus","faCheckSquare","faSignOutAlt","login","faUser","toNote","deleteNote","Login","register","email","pw","error","onSubmit","placeholder","App","basename","process","path","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","StrictMode","getElementById","URL","origin","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d891f88f.chunk.js","sourcesContent":["export type Color = 'white' | 'red' | 'green' | 'blue' | 'orange';\n\nexport const colors: Color[] = ['white', 'red', 'green', 'blue', 'orange'];\n\nexport interface HasId {\n    id: string;\n}\n\nexport interface HasTimestamp {\n    timestamp: string;\n}\n\nexport interface HasIdTimestamp extends HasId, HasTimestamp {\n    synchronized: boolean;\n}\n\nexport interface Note extends HasIdTimestamp {\n    name: string;\n    markdown: string;\n    color: Color;\n}\n\nexport type NoteType = 'empty' | 'checklist';\n\nexport type WithoutIdTimestamp<T> = Omit<Omit<Omit<T, 'id'>, 'timestamp'>, 'synchronized'>;\n\nexport interface NetworkData<T extends HasIdTimestamp> {\n    id: string;\n    timestamp: string;\n    data: WithoutIdTimestamp<T>;\n}\n\nexport function toNetworkData<T extends HasIdTimestamp>(data: T): NetworkData<T> {\n    const copy = {\n        ...data\n    };\n    delete copy.id;\n    delete copy.timestamp;\n\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        data: copy\n    };\n}\n\nexport function fromNetworkData<T extends HasIdTimestamp>(data: NetworkData<T>): T {\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        synchronized: true,\n        ...data.data\n    } as any;\n}\n\nexport interface NetworkNote extends NetworkData<Note> {\n\n};\n\nexport type NewNote = WithoutIdTimestamp<Note>;","import * as React from 'react';\n\nimport './style.css';\n\ninterface CheckboxProps {\n    checked: boolean;\n    onChange: (change: React.ChangeEvent<HTMLInputElement>) => void;\n    labels: JSX.Element[];\n}\n\nexport function CheckBox({ checked, onChange, labels }: CheckboxProps) {\n    return (\n        <label className=\"checkbox-container\">{labels}\n            <input type=\"checkbox\" checked={checked}\n                onChange={ev => onChange(ev)}/>\n            <span className=\"checkbox-checkmark\"></span>\n        </label>\n    );\n}","import * as React from 'react';\n\nimport ReactMarkdown from 'react-markdown';\n\n\nimport {listItem as defaultListItem} from 'react-markdown/lib/renderers';\nimport { CheckBox } from '../checkbox/checkbox';\n\nimport { ReactTinyLink } from 'react-tiny-link';\n\nimport './style.css';\n\ninterface MDState {\n    value: string;\n}\n\ninterface MDProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nfunction generateCheckbox(checked: boolean) {\n    return checked ? '- [x]' : '- [ ]';\n}\n\nfunction isNoLabel(child: any) {\n    return child.key.startsWith('list') || (child.key.startsWith('link') && child.props.children.length === 0);\n}\n\nexport class MarkDownWrap extends React.Component<MDProps, MDState> {\n    renderListItem = (props: any) => {\n        if (props.checked !== null && props.checked !== undefined) {\n            const lineIndex = props.sourcePosition.start.line - 1;\n            let labels = props.children.filter((child: any) => !isNoLabel(child));\n            let lists = props.children.filter((child: any) => isNoLabel(child));\n\n            if (labels.length === 0) {\n                labels.push((\n                    <span key={`placeholder-${props.sourcePosition.start.line}`}>\n                        &nbsp;\n                    </span>\n                ));\n            }\n\n            return (\n                <li>\n                    <CheckBox\n                        checked={props.checked}\n                        onChange={ev => this.toggleCheckbox(ev, lineIndex, props)}\n                        labels={labels}/>\n                    {lists}\n                </li>\n            );\n        }\n        // otherwise default to list item\n        return defaultListItem(props);\n      }\n\n    renderLink = (props: any) => {\n        if (props.children.length === 0) {\n            return (\n                <div className=\"react-tiny-link-wrap\">\n                    <ReactTinyLink\n                        cardSize=\"small\"\n                        showGraphic={true}\n                        maxLine={2}\n                        minLine={1}\n                        url={props.href}\n                        />\n                </div>\n            );\n        } else {\n            return (\n                <a href={props.href}>\n                    {props.children}\n                </a>\n            );\n        }\n    }\n\n    renderParagraph = (props: any) => {\n        return (\n            <>\n                {props.children}<br/>\n            </>\n        );\n    }\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            value: props.value\n        };\n    }\n\n    setValue(value: string) {\n        this.setState({\n            value\n        });\n\n        this.props.onChange(value);\n    }\n\n    toggleCheckbox(ev: React.ChangeEvent<HTMLInputElement>, lineIndex: number, props: any) {\n        const lines = this.state.value.split('\\n');\n\n        lines[lineIndex] = lines[lineIndex].replace(\n            generateCheckbox(props.checked),\n            generateCheckbox(!props.checked)\n        );\n        this.setValue(lines.join('\\n'));\n    }\n\n    render() {\n        return (\n            <ReactMarkdown source={this.state.value}\n                renderers={{\n                    listItem: this.renderListItem,\n                    link: this.renderLink,\n                    paragraph: this.renderParagraph\n                }}\n                rawSourcePos={true}/>\n        );\n    }\n}","export function previousLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i > 0) {\n        return lines[i-1];\n    }\n    return undefined;\n}\n\nexport function currentLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i < lines.length) {\n        return lines[i];\n    }\n    return undefined;\n}\n\nexport function lineStart(str: string, position: number): number {\n    const lines = str.split('\\n');\n    let i = 0;\n    let start = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        start += lines[i].length + 1;\n        i += 1;\n    }\n    return start;\n}\n\nexport const listRegExp = /^([\\s>]*)(([-*]|(([0-9]+)\\.))\\s(\\[[ x]\\])?)?/;","type Subscriber<T> = (value: T) => void;\n\nexport class Emitter<T> {\n    private subscribers: Subscriber<T>[] = [];\n\n    public subscribe(subscriber: Subscriber<T>) {\n        this.subscribers.push(subscriber);\n    }\n\n    public emit(value: T) {\n        for (let subscriber of this.subscribers) {\n            subscriber(value);\n        }\n    }\n}","import { Emitter } from \"../util/emitter\";\nimport { urlPrefix } from \"./entity.service\";\n\nexport class LoginService {\n    static localStorageKey = 'token';\n\n    token: string | null = localStorage.getItem(LoginService.localStorageKey);\n\n    loggedInEv = new Emitter<void>();\n\n    public async login(username: string, password: string) {\n        const response = await fetch(`${urlPrefix}/api-token-auth/`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username, password\n            })\n        });\n\n        const json = await response.json();\n        this.token = json.token;\n        localStorage.setItem(LoginService.localStorageKey, json.token);\n\n        this.loggedInEv.emit();\n\n        return this.token;\n    }\n\n    logout() {\n        this.token = null;\n    }\n\n    public async register(username: string, password: string) {\n        const response = await fetch(`${urlPrefix}/api-token-auth/`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username, password\n            })\n        });\n\n        const json = await response.json();\n        this.token = json.token;\n        localStorage.setItem(LoginService.localStorageKey, json.token);\n\n        this.loggedInEv.emit();\n\n        return this.token;\n    }\n\n    loggedIn(): boolean {\n        return !!this.token;\n    }\n\n    getToken(): string | null {\n        return this.token;\n    }\n}\n\nexport const loginService = new LoginService();","import { toNetworkData, fromNetworkData, HasIdTimestamp } from \"../util/types\";\nimport { loginService } from \"./login.service\";\n\nexport const urlPrefix = 'https://detext.haskai.de/syncify/api';\n\nexport class EntityService<T extends HasIdTimestamp> {\n\n    constructor(private name: string) {\n\n    }\n\n    async fetchEntities(): Promise<T[]> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n\n        const json = await response.json();\n        return json.map((x: any) => fromNetworkData(x));\n    }\n\n    async createEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async updateEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/${entity.id}/?tpe=${this.name}`, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async deleteEntity(id: string): Promise<void> {\n        await fetch(`${urlPrefix}/entity/${id}/?tpe=${this.name}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n    }\n}","import { EntityService } from \"../network/entity.service\";\nimport { SyncService } from \"../network/sync.service\";\nimport { Note } from \"./types\";\n\nconst noteNetworkService = new EntityService<Note>('note');\nexport const noteService = new SyncService<Note>(noteNetworkService, 'note');","import { HasIdTimestamp, WithoutIdTimestamp } from \"../util/types\";\nimport { EntityService } from \"./entity.service\";\nimport { loginService } from \"./login.service\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class SyncService<T extends HasIdTimestamp> {\n    constructor(private entityService: EntityService<T>, private name: string){\n        loginService.loggedInEv.subscribe(() => {\n            this.getEntities().then(x => {\n            });\n        });\n    }\n\n    storeEntities(entities: T[]) {\n        localStorage.setItem(this.name, JSON.stringify(entities));\n    }\n\n    getEntitiesLocal(): T[] {\n        let entities = localStorage.getItem(this.name);\n        if (entities === null) {\n            entities = \"[]\";\n        }\n        return JSON.parse(entities);\n    }\n\n    async getEntities(): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                let entities = await this.entityService.fetchEntities();\n\n                const localEntities = this.getEntitiesLocal();\n\n                const entMap = this.makeMap(entities);\n                const localEntMap = this.makeMap(localEntities);\n\n                const newEnts: T[] = [];\n                const localNewEnts: T[] = [];\n                const updates: T[] = [];\n\n                for (let localEnt of localEntities) {\n                    if (entMap[localEnt.id] !== undefined) {\n                        const localDate = new Date(localEnt.timestamp);\n                        const remoteDate = new Date(entMap[localEnt.id].timestamp);\n                        if (localDate > remoteDate) {\n                            updates.push(localEnt);\n                        } else {\n                            newEnts.push(entMap[localEnt.id]);\n                        }\n                    } else if (!localEnt.synchronized) {\n                        localNewEnts.push(localEnt);\n                    }\n                }\n\n                for (let ent of entities) {\n                    if (localEntMap[ent.id] === undefined) {\n                        newEnts.push(ent);\n                    }\n                }\n\n                for (let localNew of localNewEnts) {\n                    await this.entityService.createEntity(localNew);\n                }\n                for (let localUp of updates) {\n                    await this.entityService.updateEntity(localUp);\n                }\n\n                entities = [\n                    ...newEnts,\n                    ...localNewEnts,\n                    ...updates\n                ];\n\n                this.storeEntities(entities);\n                return entities;\n            } catch (e) {\n            }\n        }\n        return this.getEntitiesLocal();\n    }\n\n    genId(): string {\n        return uuidv4();\n    }\n\n    async createEntity(entity: WithoutIdTimestamp<T>): Promise<string> {\n        const copy: T = {\n            id: this.genId(),\n            timestamp: (new Date()).toISOString(),\n            ...entity\n        } as any;\n\n        let created;\n        if (loginService.loggedIn()) {\n            try {\n                created = await this.entityService.createEntity(copy);\n            } catch (e) {\n                created = copy;\n            }\n        } else {\n            created = copy;\n        }\n\n        const localEntities = this.getEntitiesLocal();\n        localEntities.push(created);\n\n        this.storeEntities(localEntities);\n\n        return created.id;\n    }\n\n    async updateEntity(entity: T) {\n        entity.timestamp = (new Date()).toISOString();\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.updateEntity(entity);\n            } catch (e) {\n            }\n        }\n\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == entity.id) {\n                entities[i] = entity;\n                break;\n            }\n        }\n\n        this.storeEntities(entities);\n    }\n\n    getEntity(id: string): T | undefined {\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == id) {\n                return entities[i];\n            }\n        }\n\n        return undefined;\n    }\n\n    async deleteEntity(id: string): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.deleteEntity(id);\n            } catch {\n            }\n        }\n        const notes = this.getEntitiesLocal();\n\n        for (let i = 0; i < notes.length; i++) {\n            // eslint-disable-next-line\n            if (notes[i].id == id) {\n                notes.splice(i, 1);\n                break;\n            }\n        }\n\n        this.storeEntities(notes);\n\n        return notes;\n    }\n\n    private makeMap(entities: T[]): {[key: string]: T} {\n        const ret: {[key: string]: T} = {};\n        for (let entity of entities) {\n            ret[entity.id] = entity;\n        }\n        return ret;\n    }\n}","import * as React from 'react';\n\nimport ReactMde, { commands, TextState, TextApi } from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { Note, colors, Color } from '../../util/types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faEyeDropper, faCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\n\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { previousLine, listRegExp, currentLine, lineStart } from '../../util/strs';\nimport { CommandGroup, GetIcon } from 'react-mde/lib/definitions/types';\nimport { noteService } from '../../util/note';\n\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Route } from 'react-router-dom';\nimport { Tab } from 'react-mde/lib/definitions/types/Tab';\n\ninterface NoteState {\n    note: Note;\n    tab: Tab;\n    editTitle: boolean;\n}\n\nexport function colorClass(color: Color) {\n    return color;\n}\n\nexport class NoteComponent extends React.Component<{}, NoteState> {\n    input?: HTMLTextAreaElement;\n\n    commands: CommandGroup[] = [\n        ...commands.getDefaultCommands(),\n        {\n            commands: [\n                {\n                    name: 'Test',\n                    icon: (getIconFromProvider: GetIcon) => (\n                        <FontAwesomeIcon icon={faEyeDropper}/>\n                    ),\n                    children: colors.map(color => (\n                        {\n                            name: 'C1',\n                            icon: (getIconFromProvider: GetIcon) => (\n                                <span style={{color}}>\n                                    <FontAwesomeIcon icon={faCircle}/>\n                                </span>\n                            ),\n                            execute: (state: TextState, api: TextApi) => {\n                                this.setColor(color);\n                            }\n                        }))\n                }\n            ]\n        }\n    ];\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            note: {\n                markdown: '',\n                id: '',\n                name: 'Placeholder',\n                color: 'white',\n                timestamp: '',\n                synchronized: false\n            },\n            tab: 'write',\n            editTitle: false\n        };\n    }\n\n    componentDidMount() {\n        const noteId = (this.props as any).match.params.noteId;\n\n        const note = noteService.getEntity(noteId);\n\n        let tab: Tab = 'write';\n        if (window.location.search) {\n            const urlParams = new URLSearchParams(window.location.search);\n            const paramTab = urlParams.get('tab');\n            if (paramTab === 'write' || paramTab === 'preview') {\n                tab = paramTab;\n            }\n        }\n\n        if (note) {\n            this.setState({\n                note,\n                tab\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        let input = document.getElementsByClassName('mde-text');\n        if (input.length > 0 && !this.input) {\n            this.input = input[0] as HTMLTextAreaElement;\n\n            this.input.addEventListener('keydown', this.handleKeyPress.bind(this));\n        }\n    }\n\n    handleKeyPress(ev: KeyboardEvent) {\n        if (ev.key === 'Enter') {\n            setTimeout(() => {\n                this.handleEnter(ev);\n            }, 10);\n        } else if (ev.key === 'Tab') {\n            ev.preventDefault();\n            setTimeout(() => {\n                this.handleTab(ev);\n            }, 10);\n        }\n    }\n\n    handleTab(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const currLine = currentLine(note, position);\n        if (currLine) {\n            const match = currLine.match(listRegExp);\n            if (match) {\n                const start = lineStart(note, position);\n                if (ev.shiftKey) {\n                    if (match[1].length >= 4) {\n                        const newVal = [note.slice(0, start), note.slice(start+4)].join('');\n                        this.setValue(newVal);\n                        setTimeout(() => {\n                            (ev.target as any).selectionStart =  position - 4;\n                            (ev.target as any).selectionEnd =  position - 4;\n                        }, 0);\n                    }\n                } else {\n                    const newVal = [note.slice(0, start), '    ', note.slice(start)].join('');\n                    this.setValue(newVal);\n                    setTimeout(() => {\n                        (ev.target as any).selectionStart =  position + 4;\n                        (ev.target as any).selectionEnd =  position + 4;\n                    }, 0);\n                }\n            }\n        }\n    }\n\n    handleEnter(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const prevLine = previousLine(note, position);\n        if (prevLine) {\n            const match = prevLine.match(listRegExp);\n            if (match) {\n                let str = match[1];\n                if (match[5] !== undefined) {\n                    str += `${parseInt(match[5]) + 1}. `\n                } else if (match[3] !== undefined) {\n                    str += `${match[3]} `;\n                }\n                if (match[6]) {\n                    str += `${match[6]} `;\n                }\n                const newVal = [note.slice(0, position), str, note.slice(position)].join('');\n\n                this.setValue(newVal);\n                setTimeout(() => {\n                    (ev.target as any).selectionStart =  position + str.length;\n                    (ev.target as any).selectionEnd =  position + str.length;\n                }, 0);\n            }\n        }\n    }\n\n    setValue(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                markdown: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            markdown: value\n        });\n    }\n\n    setTab(tab: Tab) {\n        this.setState({\n            tab\n        });\n    }\n\n    setColor(color: Color) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                color\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            color\n        });\n    }\n\n    toggleEdit() {\n        this.setState({\n            editTitle: !this.state.editTitle\n        });\n    }\n\n    setName(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                name: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            name: value\n        });\n    }\n\n    editKeyUp(ev: React.KeyboardEvent) {\n        if (ev.nativeEvent.key === 'Enter') {\n            this.toggleEdit();\n        }\n    }\n\n    goBack(ev: React.MouseEvent, history: any) {\n        ev.stopPropagation();\n        history.goBack();\n    }\n\n    render() {\n        let title: any;\n        if (!this.state.editTitle) {\n            title = (history: any) => (\n                <div className=\"note-title\" onClick={() => this.toggleEdit()}>\n                    <button className=\"pure-button\" onClick={ev => this.goBack(ev, history)}>\n                        <FontAwesomeIcon icon={faArrowLeft}/>\n                    </button>\n                    <div className=\"edit-region\">\n                        {this.state.note.name}\n                        <span className=\"edit\">\n                            <FontAwesomeIcon icon={faPen}/>\n                        </span>\n                    </div>\n                </div>\n            );\n        } else {\n            title = (history: any) => (\n                <div className=\"note-title\">\n                    <input value={this.state.note.name}\n                        onChange={val => this.setName(val.target.value)}\n                        onKeyUp={ev => this.editKeyUp(ev)}\n                        autoFocus={true}\n                        className=\"editName\"/>\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            )\n        }\n\n        return (\n            <Route render={({ history }) => (\n                <div>\n                    {title(history)}\n                    <ReactMde\n                        value={this.state.note.markdown}\n                        onChange={ev => this.setValue(ev)}\n                        selectedTab={this.state.tab}\n                        onTabChange={ev => this.setTab(ev)}\n                        generateMarkdownPreview={markdown =>\n                            Promise.resolve(\n                                <MarkDownWrap\n                                    value={markdown}\n                                    onChange={value => this.setValue(value)}/>\n                            )\n                        }\n                        commands={this.commands}\n                        classes={{\n                            textArea: colorClass(this.state.note.color),\n                            preview: colorClass(this.state.note.color)\n                        }}\n                    />\n                </div>\n            )}/>\n        );\n    }\n}","import React from 'react';\n\nimport './style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faEdit } from '@fortawesome/free-solid-svg-icons'\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { colorClass } from '../note/Note';\nimport { Color } from '../../util/types';\nimport { noteService } from '../../util/note';\n\ninterface NotePreviewProps {\n    id: string;\n    deleteClicked: (id: string) => void;\n    editClicked: (id: string) => void;\n}\n\ninterface NotePreviewState {\n    markdown: string;\n    name: string;\n    color: Color;\n}\n\nexport class NotePreview extends React.Component<NotePreviewProps, NotePreviewState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            markdown: '',\n            name: '',\n            color: 'white'\n        };\n\n        const note = noteService.getEntity(this.props.id);\n\n        if (note) {\n            this.state = {\n                markdown: note.markdown,\n                name: note.name,\n                color: note.color\n            };\n        }\n    }\n\n    edit(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.editClicked(this.props.id);\n    }\n\n    delete(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.deleteClicked(this.props.id);\n    }\n\n    render() {\n        return (\n            <div className={`preview ${colorClass(this.state.color)}`}>\n                <div className=\"title\">\n                    {this.state.name}\n                    <span className=\"delete\" onClick={ev => this.delete(ev)}>\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </span>\n                    <span className=\"edit-preview\" onClick={ev => this.edit(ev)}>\n                        <FontAwesomeIcon icon={faEdit}/>\n                    </span>\n                </div>\n                <MarkDownWrap\n                    value={this.state.markdown}\n                    onChange={() => {}}/>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Note, NewNote, NoteType } from '../../util/types';\nimport { Route } from 'react-router-dom';\nimport { NotePreview } from '../note-preview/NotePreview';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faCheckSquare, faUser, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\nimport { noteService } from '../../util/note';\nimport { Tab } from 'react-mde/lib/definitions/types/Tab';\n\ninterface HomeState {\n    notes: Note[];\n    choosing: boolean;\n    loggedIn: boolean;\n}\n\nexport class Home extends React.Component<{}, HomeState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            notes: [],\n            choosing: false,\n            loggedIn: false\n        };\n    }\n\n    componentDidMount(){\n        this.setState({\n            notes: noteService.getEntitiesLocal(),\n            loggedIn: loginService.loggedIn()\n        });\n\n        noteService.getEntities().then(notes => {\n            this.setState({\n                notes\n            });\n        });\n    }\n\n    async newNote(history: any, type: NoteType = 'empty') {\n        const note: NewNote = {\n            name: 'New Note',\n            markdown: type === 'empty' ? '' : '- [ ] ',\n            color: 'white'\n        }\n\n        const id = await noteService.createEntity(note);\n\n        history.push(`/note/${id}?tab=write`);\n    }\n\n    toNote(id: string, history: any, tab: Tab = 'preview') {\n        history.push(`/note/${id}?tab=${tab}`);\n    }\n\n    deleteNote(id: string) {\n        noteService.deleteEntity(id).then(notes => {\n            this.setState({\n                notes: notes\n            });\n        });\n    }\n\n    login(history: any) {\n        history.push(`/login/`)\n    }\n\n    logout() {\n        loginService.logout();\n        this.setState({\n            loggedIn: loginService.loggedIn()\n        });\n    }\n\n    render() {\n        const sortedNotes = this.state.notes.sort((a, b) => {\n            return new Date(a.timestamp) > new Date(b.timestamp) ? -1 : 1;\n        });\n\n        return <Route render={({ history }) => (\n            <div className=\"home\">\n                <table className=\"home\">\n                    <tbody>\n                        <tr className=\"actions\">\n                            <td className=\"actions\">\n                                <button className=\"pure-button mr-2\" onClick={() => this.newNote(history)}>\n                                    <FontAwesomeIcon icon={faPlus}/>\n                                </button>\n                                <button className=\"pure-button\" onClick={() => this.newNote(history, 'checklist')}>\n                                    <FontAwesomeIcon icon={faCheckSquare}/>\n                                </button>\n                                {!this.state.loggedIn ? (\n                                    <button className=\"pure-button login\" onClick={() => this.login(history)}>\n                                        <FontAwesomeIcon icon={faUser}/>\n                                    </button>\n                                    ) : (\n                                    <button className=\"pure-button logout\" onClick={() => this.logout()}>\n                                        <FontAwesomeIcon icon={faSignOutAlt}/>\n                                    </button>\n                                    )\n                                }\n                            </td>\n                        </tr>\n                        {sortedNotes.map(note => {\n                            return <tr className=\"note\" key={note.id}>\n                                <td className=\"note\" onClick={() => this.toNote(note.id, history)}>\n                                    <NotePreview id={note.id}\n                                        deleteClicked={id => this.deleteNote(id)}\n                                        editClicked={id => this.toNote(id, history, 'write')}/>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )} />;\n    }\n}","import * as React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {  faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\ninterface LoginState {\n    error?: string;\n    register: boolean;\n}\n\nexport class Login extends React.Component<{}, LoginState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            register: false\n        };\n    }\n\n    login(history: any, ev: React.FormEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        const email = (ev.target as any)[1].value;\n        const pw = (ev.target as any)[2].value;\n\n        if (this.state.register) {\n            const pwr = (ev.target as any)[3].value;\n\n            if (pw === pwr) {\n                loginService.register(email, pw).then(token => {\n                    if (token !== undefined) {\n                        history.push(`/`);\n                    } else {\n                        this.setState({\n                            error: 'Could not log in'\n                        });\n                    }\n                });\n            } else {\n                this.setState({\n                    error: 'Passwords do not match'\n                });\n            }\n        } else {\n            loginService.login(email, pw).then(token => {\n                if (token !== undefined) {\n                    history.push(`/`);\n                } else {\n                    this.setState({\n                        error: 'Could not log in'\n                    });\n                }\n            });\n        }\n    }\n\n    toggleRegister() {\n        this.setState({\n            register: !this.state.register\n        });\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"login\">\n                <button className=\"pure-button\" onClick={() => history.goBack()}>\n                    <FontAwesomeIcon icon={faArrowLeft}/>\n                </button>\n                <form className=\"pure-form\"\n                        onSubmit={ev => this.login(history, ev)}>\n                    <fieldset>\n                        <legend>Login</legend>\n\n                        <input type=\"username\" placeholder=\"Username\"/>\n                        <input type=\"password\" placeholder=\"Password\"/>\n                        {this.state.register ?\n                            <input type=\"password\" placeholder=\"Repeat Password\"/> :\n                            <span></span>\n                        }\n\n                        <button type=\"submit\" className=\"pure-button pure-button-primary\">\n                            {this.state.register ? 'Register' : 'Sign in'}\n                        </button>\n\n                        {/*<a onClick={() => this.toggleRegister()}\n                            className=\"ml-1\">\n                            {this.state.register ? 'Sign in' : 'Register'}\n                        </a>*/}\n\n                        {this.state.error ? this.state.error : ''}\n                    </fieldset>\n                </form>\n            </div>\n        )} />;\n    }\n}","import React from 'react';\nimport { NoteComponent } from './components/note/Note';\n\nimport 'purecss/build/base-min.css';\nimport 'purecss/build/buttons-min.css';\nimport 'purecss/build/grids-responsive-min.css';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Home } from './components/home/Home';\nimport { Login } from './components/login/Login';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <div className=\"pure-g center\">\n        <div className=\"pure-u-1 pure-u-md-1-5\">\n        </div>\n        <div className=\"pure-u-1 pure-u-md-3-5\">\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route path=\"/note/:noteId\" component={NoteComponent}>\n              </Route>\n              <Route path=\"/login/\">\n                <Login />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
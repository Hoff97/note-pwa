{"version":3,"sources":["util/note.ts","util/types.ts","components/checkbox/checkbox.tsx","components/mdWrap/MarkDownWrap.tsx","util/strs.ts","components/note/Note.tsx","components/note-preview/NotePreview.tsx","components/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["saveNotes","notes","localStorage","setItem","JSON","stringify","getNotes","getItem","ret","parse","i","length","undefined","color","genId","id","noteContent","type","newNote","markdown","note","name","push","saveNote","getNote","colors","CheckBox","checked","onChange","children","className","ev","generateCheckbox","MarkDownWrap","props","renderListItem","lineIndex","sourcePosition","start","line","toggleCheckbox","defaultListItem","state","value","this","setState","lines","split","replace","setValue","join","source","renderers","listItem","rawSourcePos","React","listRegExp","NoteComponent","input","commands","getDefaultCommands","icon","getIconFromProvider","faEyeDropper","map","style","faCircle","execute","api","setColor","tab","editTitle","match","params","noteId","document","getElementsByClassName","addEventListener","handleKeyPress","bind","key","setTimeout","handleEnter","preventDefault","handleTab","position","target","selectionStart","currLine","str","currentLine","lineStart","shiftKey","newVal","slice","selectionEnd","prevLine","previousLine","parseInt","nativeEvent","toggleEdit","title","val","setName","onKeyUp","editKeyUp","autoFocus","faPen","onClick","selectedTab","onTabChange","setTab","generateMarkdownPreview","Promise","resolve","classes","textArea","preview","NotePreview","stopPropagation","deleteClicked","delete","faTrash","Component","Home","context","choosing","history","splice","deleteNote","copy","copyNote","render","faPlus","faCheckSquare","toNote","App","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mTAIO,SAASA,EAAUC,GACtBC,aAAaC,QAHO,QAGkBC,KAAKC,UAAUJ,IAGlD,SAASK,IACZ,IAAIL,EAAQC,aAAaK,QAPL,SAQN,OAAVN,IACAA,EAAQ,MAGZ,IADA,IAAMO,EAAMJ,KAAKK,MAAMR,GACdS,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,SACPE,IAAjBJ,EAAIE,GAAGG,QACPL,EAAIE,GAAGG,MAAQ,SAGvB,OAAOL,EAGX,SAASM,EAAMb,GACX,OAAqB,IAAjBA,EAAMU,OACC,EAEAV,EAAMA,EAAMU,OAAS,GAAGI,GAAK,EAMrC,SAASC,EAAYC,GACxB,MAAa,UAATA,EACO,GAEA,SAIR,SAASC,EAAQC,GACpB,IAAMlB,EAAQK,IAERc,EAAa,CACfL,GAAID,EAAMb,GACVoB,KAAM,WACNF,WACAN,MAAO,SAOX,OAJAZ,EAAMqB,KAAKF,GAEXpB,EAAUC,GAEHmB,EAAKL,GAGT,SAASQ,EAASH,GAGrB,IAFA,IAAMnB,EAAQK,IAELI,EAAI,EAAGA,EAAIT,EAAMU,OAAQD,IAE9B,GAAIT,EAAMS,GAAGK,IAAMK,EAAKL,GAAI,CACxBd,EAAMS,GAAKU,EACX,MAIRpB,EAAUC,GAGP,SAASuB,EAAQT,GAGpB,IAFA,IAAMd,EAAQK,IAELI,EAAI,EAAGA,EAAIT,EAAMU,OAAQD,IAE9B,GAAIT,EAAMS,GAAGK,IAAMA,EACf,OAAOd,EAAMS,GC3ElB,IAAMe,EAAkB,CAAC,QAAS,MAAO,QAAS,OAAQ,U,sDCQ1D,SAASC,EAAT,GAAmE,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAC1C,OACI,yBAAOC,UAAU,sBAAsBD,EACnC,yBAAOZ,KAAK,WAAWU,QAASA,EAASC,SAAU,SAAAG,GAAE,OAAIH,EAASG,MAClE,wBAAMD,UAAU,wBCG5B,SAASE,EAAiBL,GACtB,OAAOA,EAAU,QAAU,QAIxB,IAAMM,EAAb,kDAeI,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAfVC,eAAiB,SAACD,GACd,GAAsB,OAAlBA,EAAMP,cAAsCf,IAAlBsB,EAAMP,QAAuB,CACvD,IAAMS,EAAYF,EAAMG,eAAeC,MAAMC,KAAO,EACpD,OACI,0BAAI,gBAACb,EAAD,CACAC,QAASO,EAAMP,QACfC,SAAU,SAAAG,GAAE,OAAI,EAAKS,eAAeT,EAAIK,EAAWF,EAAMP,UACzDE,SAAUK,EAAML,YAI5B,OAAOY,mBAAgBP,IAMvB,EAAKQ,MAAQ,CACTC,MAAOT,EAAMS,OAJG,EAf5B,qDAuBaA,GACLC,KAAKC,SAAS,CACVF,UAGJC,KAAKV,MAAMN,SAASe,KA5B5B,qCA+BmBZ,EAAyCK,EAAmBT,GACvE,IAAMmB,EAAQF,KAAKF,MAAMC,MAAMI,MAAM,MAErCD,EAAMV,GAAaU,EAAMV,GAAWY,QAChChB,EAAiBL,GACjBK,GAAkBL,IAEtBiB,KAAKK,SAASH,EAAMI,KAAK,SAtCjC,+BA0CQ,OACI,gBAAC,IAAD,CAAeC,OAAQP,KAAKF,MAAMC,MAC9BS,UAAW,CAACC,SAAUT,KAAKT,gBAC3BmB,cAAc,QA7C9B,GAAkCC,aCmB3B,IAAMC,EAAa,+CCbnB,IAAMC,EAAb,kDA6BI,WAAYvB,GAAa,IAAD,8BACpB,cAAMA,IA7BVwB,WA4BwB,IA1BxBC,SA0BwB,sBAzBjBA,WAASC,sBAyBQ,CAxBpB,CACID,SAAU,CACN,CACItC,KAAM,OACNwC,KAAM,SAACC,GAAD,OACF,gBAAC,IAAD,CAAiBD,KAAME,OAE3BlC,SAAUJ,EAAOuC,KAAI,SAAAnD,GAAK,MACtB,CACIQ,KAAM,KACNwC,KAAM,SAACC,GAAD,OACF,wBAAMG,MAAO,CAACpD,UACV,gBAAC,IAAD,CAAiBgD,KAAMK,QAG/BC,QAAS,SAACzB,EAAkB0B,GACxB,EAAKC,SAASxD,aAWtC,EAAK6B,MAAQ,CACTtB,KAAM,CACFD,SAAU,GACVJ,IAAK,EACLM,KAAM,cACNR,MAAO,SAEXyD,IAAK,QACLC,WAAW,GAXK,EA7B5B,gEA6CQ,IAEMnD,EAAOI,EAFGoB,KAAKV,MAAcsC,MAAMC,OAAOC,QAI5CtD,GACAwB,KAAKC,SAAS,CACVzB,WAnDhB,2CAyDQ,IAAIsC,EAAQiB,SAASC,uBAAuB,YACxClB,EAAM/C,OAAS,IAAMiC,KAAKc,QAC1Bd,KAAKc,MAAQA,EAAM,GAEnBd,KAAKc,MAAMmB,iBAAiB,UAAWjC,KAAKkC,eAAeC,KAAKnC,UA7D5E,qCAiEmBb,GAAoB,IAAD,OACf,UAAXA,EAAGiD,IACHC,YAAW,WACP,EAAKC,YAAYnD,KAClB,IACe,QAAXA,EAAGiD,MACVjD,EAAGoD,iBACHF,YAAW,WACP,EAAKG,UAAUrD,KAChB,OA1Ef,gCA8EcA,GACN,IAAMsD,EAAoBtD,EAAGuD,OAAeC,eAEtCnE,EAAOwB,KAAKF,MAAMtB,KAAKD,SAEvBqE,EDjGP,SAAqBC,EAAaJ,GAGrC,IAFA,IAAMvC,EAAQ2C,EAAI1C,MAAM,MACpBrC,EAAI,EACF2E,EAAWvC,EAAMpC,GAAGC,QACtB0E,GAAYvC,EAAMpC,GAAGC,OACrB0E,GAAY,EACZ3E,GAAK,EAET,GAAIA,EAAIoC,EAAMnC,OACV,OAAOmC,EAAMpC,GCwFIgF,CAAYtE,EAAMiE,GACnC,GAAIG,EAAU,CACV,IAAMhB,EAAQgB,EAAShB,MAAMhB,GAC7B,GAAIgB,EAAO,CACP,IAAMlC,EDvFf,SAAmBmD,EAAaJ,GAInC,IAHA,IAAMvC,EAAQ2C,EAAI1C,MAAM,MACpBrC,EAAI,EACJ4B,EAAQ,EACN+C,EAAWvC,EAAMpC,GAAGC,QACtB0E,GAAYvC,EAAMpC,GAAGC,OACrB0E,GAAY,EACZ/C,GAASQ,EAAMpC,GAAGC,OAAS,EAC3BD,GAAK,EAET,OAAO4B,EC6EmBqD,CAAUvE,EAAMiE,GAC9B,GAAItD,EAAG6D,UACH,GAAIpB,EAAM,GAAG7D,QAAU,EAAG,CACtB,IAAMkF,EAAS,CAACzE,EAAK0E,MAAM,EAAGxD,GAAQlB,EAAK0E,MAAMxD,EAAM,IAAIY,KAAK,IAChEN,KAAKK,SAAS4C,GACdZ,YAAW,WACNlD,EAAGuD,OAAeC,eAAkBF,EAAW,EAC/CtD,EAAGuD,OAAeS,aAAgBV,EAAW,IAC/C,QAEJ,CACH,IAAMQ,EAAS,CAACzE,EAAK0E,MAAM,EAAGxD,GAAQ,OAAQlB,EAAK0E,MAAMxD,IAAQY,KAAK,IACtEN,KAAKK,SAAS4C,GACdZ,YAAW,WACNlD,EAAGuD,OAAeC,eAAkBF,EAAW,EAC/CtD,EAAGuD,OAAeS,aAAgBV,EAAW,IAC/C,QAvGvB,kCA6GgBtD,GACR,IAAMsD,EAAoBtD,EAAGuD,OAAeC,eAEtCnE,EAAOwB,KAAKF,MAAMtB,KAAKD,SAEvB6E,ED9IP,SAAsBP,EAAaJ,GAGtC,IAFA,IAAMvC,EAAQ2C,EAAI1C,MAAM,MACpBrC,EAAI,EACF2E,EAAWvC,EAAMpC,GAAGC,QACtB0E,GAAYvC,EAAMpC,GAAGC,OACrB0E,GAAY,EACZ3E,GAAK,EAET,GAAIA,EAAI,EACJ,OAAOoC,EAAMpC,EAAE,GCqIEuF,CAAa7E,EAAMiE,GACpC,GAAIW,EAAU,CACV,IAAMxB,EAAQwB,EAASxB,MAAMhB,GAC7B,GAAIgB,EAAO,CACP,IAAIiB,EAAMjB,EAAM,QACC5D,IAAb4D,EAAM,GACNiB,GAAG,UAAOS,SAAS1B,EAAM,IAAM,EAA5B,WACiB5D,IAAb4D,EAAM,KACbiB,GAAG,UAAOjB,EAAM,GAAb,MAEHA,EAAM,KACNiB,GAAG,UAAOjB,EAAM,GAAb,MAEP,IAAMqB,EAAS,CAACzE,EAAK0E,MAAM,EAAGT,GAAWI,EAAKrE,EAAK0E,MAAMT,IAAWnC,KAAK,IAEzEN,KAAKK,SAAS4C,GACdZ,YAAW,WACNlD,EAAGuD,OAAeC,eAAkBF,EAAWI,EAAI9E,OACnDoB,EAAGuD,OAAeS,aAAgBV,EAAWI,EAAI9E,SACnD,OArInB,+BA0IagC,GACLC,KAAKC,SAAS,CACVzB,KAAK,eACEwB,KAAKF,MAAMtB,KADd,CAEAD,SAAUwB,MAIlBpB,EAAS,eACFqB,KAAKF,MAAMtB,KADV,CAEJD,SAAUwB,OApJtB,6BAwJW2B,GACH1B,KAAKC,SAAS,CACVyB,UA1JZ,+BA8JazD,GACL+B,KAAKC,SAAS,CACVzB,KAAK,eACEwB,KAAKF,MAAMtB,KADd,CAEAP,YAIRU,EAAS,eACFqB,KAAKF,MAAMtB,KADV,CAEJP,aAxKZ,mCA6KQ+B,KAAKC,SAAS,CACV0B,WAAY3B,KAAKF,MAAM6B,cA9KnC,8BAkLY5B,GACJC,KAAKC,SAAS,CACVzB,KAAK,eACEwB,KAAKF,MAAMtB,KADd,CAEAC,KAAMsB,MAIdpB,EAAS,eACFqB,KAAKF,MAAMtB,KADV,CAEJC,KAAMsB,OA5LlB,gCAgMcZ,GACqB,UAAvBA,EAAGoE,YAAYnB,KACfpC,KAAKwD,eAlMjB,+BAsMc,IACFC,EADC,OA0BL,OAdIA,EAVCzD,KAAKF,MAAM6B,UAWR,uBAAKzC,UAAU,cACX,yBAAOa,MAAOC,KAAKF,MAAMtB,KAAKC,KAC1BO,SAAU,SAAA0E,GAAG,OAAI,EAAKC,QAAQD,EAAIhB,OAAO3C,QACzC6D,QAAS,SAAAzE,GAAE,OAAI,EAAK0E,UAAU1E,IAC9B2E,WAAW,EACX5E,UAAU,aACd,wBAAMA,UAAU,QACZ,gBAAC,IAAD,CAAiB+B,KAAM8C,QAhB/B,uBAAK7E,UAAU,aAAa8E,QAAS,kBAAM,EAAKR,eAC3CxD,KAAKF,MAAMtB,KAAKC,KACjB,wBAAMS,UAAU,QACZ,gBAAC,IAAD,CAAiB+B,KAAM8C,QAoBnC,2BACKN,EACD,gBAAC,IAAD,CACI1D,MAAOC,KAAKF,MAAMtB,KAAKD,SACvBS,SAAU,SAAAG,GAAE,OAAI,EAAKkB,SAASlB,IAC9B8E,YAAajE,KAAKF,MAAM4B,IACxBwC,YAAa,SAAA/E,GAAE,OAAI,EAAKgF,OAAOhF,IAC/BiF,wBAAyB,SAAA7F,GAAQ,OAC7B8F,QAAQC,QACJ,gBAAC,EAAD,CACIvE,MAAO,EAAKD,MAAMtB,KAAKD,SACvBS,SAAU,SAAAe,GAAK,OAAI,EAAKM,SAASN,QAG7CgB,SAAUf,KAAKe,SACfwD,QAAS,CACLC,SAAqBxE,KAAKF,MAAMtB,KAAKP,MACrCwG,QAAoBzE,KAAKF,MAAMtB,KAAKP,cAlP5D,GAAmC0C,a,8CCNtB+D,G,OAAb,kDACI,WAAYpF,GAAa,IAAD,uBACpB,cAAMA,IAEDQ,MAAQ,CACTvB,SAAU,GACVE,KAAM,GACNR,MAAO,SAGX,IAAMO,EAAOI,EAAQ,EAAKU,MAAMnB,IATZ,OAWhBK,IACA,EAAKsB,MAAQ,CACTvB,SAAUC,EAAKD,SACfE,KAAMD,EAAKC,KACXR,MAAOO,EAAKP,QAfA,EAD5B,mDAqBWkB,GACHA,EAAGoD,iBACHpD,EAAGwF,kBACH3E,KAAKV,MAAMsF,cAAc5E,KAAKV,MAAMnB,MAxB5C,+BA2Bc,IAAD,OACL,OACI,yBAAKe,UAAS,kBAAwBc,KAAKF,MAAM7B,QAC7C,yBAAKiB,UAAU,SACVc,KAAKF,MAAMrB,KACZ,0BAAMS,UAAU,SAAS8E,QAAS,SAAA7E,GAAE,OAAI,EAAK0F,OAAO1F,KAChD,kBAAC,IAAD,CAAiB8B,KAAM6D,QAG/B,kBAAC,EAAD,CACI/E,MAAOC,KAAKF,MAAMvB,SAClBS,SAAU,oBAtC9B,GAAiC2B,IAAMoE,YCN1BC,G,OAAb,kDACI,WAAY1F,EAAY2F,GAAe,IAAD,8BAClC,cAAM3F,EAAO2F,IAERnF,MAAQ,CACTzC,MAAO,GACP6H,UAAU,GALoB,EAD1C,gEAWQlF,KAAKC,SAAS,CACV5C,MAAOK,QAZnB,8BAgBYyH,GAAyC,IAA3B9G,EAA0B,uDAAT,QAC7BF,EAAKG,EAAQF,EAAYC,IAE/B8G,EAAQzG,KAAR,gBAAsBP,MAnB9B,6BAsBWA,EAAYgH,GACfA,EAAQzG,KAAR,gBAAsBP,MAvB9B,iCA0BeA,GACP,IAAMd,EPyCP,SAAoBc,GAGvB,IAFA,IAAMd,EAAQK,IAELI,EAAI,EAAGA,EAAIT,EAAMU,OAAQD,IAE9B,GAAIT,EAAMS,GAAGK,IAAMA,EAAI,CACnBd,EAAM+H,OAAOtH,EAAG,GAChB,MAMR,OAFAV,EAAUC,GAEHA,EOtDWgI,CAAWlH,GACzB6B,KAAKC,SAAS,CACV5C,MAAOA,MA7BnB,+BAiCac,GACL,IAAMd,EPkDP,SAAkBc,GAGrB,IAFA,IAAMd,EAAQK,IAELI,EAAI,EAAGA,EAAIT,EAAMU,OAAQD,IAE9B,GAAIT,EAAMS,GAAGK,IAAMA,EAAI,CACnB,IAAMmH,EAAO,CACTnH,GAAID,EAAMb,GACVoB,KAAMpB,EAAMS,GAAGW,KAAO,UACtBF,SAAUlB,EAAMS,GAAGS,SACnBN,MAAOZ,EAAMS,GAAGG,OAEpBZ,EAAMqB,KAAK4G,GACX,MAMR,OAFAlI,EAAUC,GAEHK,IOrEW6H,CAASpH,GACvB6B,KAAKC,SAAS,CACV5C,MAAOA,MApCnB,+BAwCc,IAAD,OACL,OAAO,gBAAC,IAAD,CAAOmI,OAAQ,gBAAGL,EAAH,EAAGA,QAAH,OAClB,uBAAKjG,UAAU,QACX,yBAAOA,UAAU,QACb,6BACI,sBAAIA,UAAU,WACV,sBAAIA,UAAU,WACV,0BAAQA,UAAU,mBAAmB8E,QAAS,kBAAM,EAAK1F,QAAQ6G,KAC7D,gBAAC,IAAD,CAAiBlE,KAAMwE,OAE3B,0BAAQvG,UAAU,cAAc8E,QAAS,kBAAM,EAAK1F,QAAQ6G,EAAS,eACjE,gBAAC,IAAD,CAAiBlE,KAAMyE,SAIlC,EAAK5F,MAAMzC,MAAM+D,KAAI,SAAA5C,GAClB,OAAO,sBAAIU,UAAU,OAAOkD,IAAK5D,EAAKL,IAClC,sBAAIe,UAAU,OAAO8E,QAAS,kBAAM,EAAK2B,OAAOnH,EAAKL,GAAIgH,KACrD,gBAAC,EAAD,CAAahH,GAAIK,EAAKL,GAAIyG,cAAe,SAAAzG,GAAE,OAAI,EAAKkH,WAAWlH,qBA1DnG,GAA0BwC,cCuBXiF,MAvBf,WAEE,OACE,yBAAK1G,UAAU,aACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,2BAEf,yBAAKA,UAAU,0BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2G,KAAK,gBAAgBC,UAAWjF,IAEvC,kBAAC,IAAD,CAAOgF,KAAK,KACV,kBAAC,EAAD,aCjBVE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvE,MACvB,2DA8CN,SAASwE,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/G,QACfyG,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClGjEC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEFzF,SAAS0F,eAAe,SDiBnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAImB,IACpBC,YACA1B,OAAOC,SAAS0B,MAEJC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAOhE,iBAAiB,QAAQ,WAC9B,IAAMoE,EAAK,UAAMsB,YAAN,sBAEP5B,IAgEV,SAAiCM,EAAeC,GAE9CwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBnC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC1C/BE,I","file":"static/js/main.febd3a71.chunk.js","sourcesContent":["import { Note } from \"./types\";\n\nconst localStorageKey = 'notes';\n\nexport function saveNotes(notes: Note[]) {\n    localStorage.setItem(localStorageKey, JSON.stringify(notes));\n}\n\nexport function getNotes(): Note[] {\n    let notes = localStorage.getItem(localStorageKey);\n    if (notes === null) {\n        notes = \"[]\";\n    }\n    const ret = JSON.parse(notes);\n    for (var i = 0; i < ret.length; i++) {\n        if (ret[i].color === undefined) {\n            ret[i].color = 'white';\n        }\n    }\n    return ret;\n}\n\nfunction genId(notes: Note[]) {\n    if (notes.length === 0) {\n        return 0;\n    } else {\n        return notes[notes.length - 1].id + 1;\n    }\n}\n\nexport type NoteType = 'empty' | 'checklist';\n\nexport function noteContent(type: NoteType) {\n    if (type === 'empty') {\n        return '';\n    } else {\n        return '- [ ] ';\n    }\n}\n\nexport function newNote(markdown: string): number {\n    const notes = getNotes();\n\n    const note: Note = {\n        id: genId(notes),\n        name: 'New note',\n        markdown,\n        color: 'white'\n    }\n\n    notes.push(note);\n\n    saveNotes(notes);\n\n    return note.id;\n}\n\nexport function saveNote(note: Note) {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == note.id) {\n            notes[i] = note;\n            break;\n        }\n    }\n\n    saveNotes(notes);\n}\n\nexport function getNote(id: number): Note | undefined {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == id) {\n            return notes[i];\n        }\n    }\n\n    return undefined;\n}\n\nexport function deleteNote(id: number): Note[] {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == id) {\n            notes.splice(i, 1);\n            break;\n        }\n    }\n\n    saveNotes(notes);\n\n    return notes;\n}\n\nexport function copyNote(id: number): Note[] {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == id) {\n            const copy = {\n                id: genId(notes),\n                name: notes[i].name + ' - Copy',\n                markdown: notes[i].markdown,\n                color: notes[i].color\n            };\n            notes.push(copy);\n            break;\n        }\n    }\n\n    saveNotes(notes);\n\n    return getNotes();\n}","export type Color = 'white' | 'red' | 'green' | 'blue' | 'orange';\n\nexport const colors: Color[] = ['white', 'red', 'green', 'blue', 'orange'];\n\nexport interface Note {\n    id: number;\n    name: string;\n    markdown: string;\n    color: Color;\n}","import * as React from 'react';\n\nimport './style.css';\n\ninterface CheckboxProps {\n    checked: boolean;\n    children: JSX.Element[];\n    onChange: (change: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport function CheckBox({ checked, onChange, children }: CheckboxProps) {\n    return (\n        <label className=\"checkbox-container\">{children}\n            <input type=\"checkbox\" checked={checked} onChange={ev => onChange(ev)}/>\n            <span className=\"checkbox-checkmark\"></span>\n        </label>\n    );\n}","import * as React from 'react';\n\nimport ReactMarkdown from 'react-markdown';\n\n\nimport {listItem as defaultListItem} from 'react-markdown/lib/renderers';\nimport { CheckBox } from '../checkbox/checkbox';\n\ninterface MDState {\n    value: string;\n}\n\ninterface MDProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nfunction generateCheckbox(checked: boolean) {\n    return checked ? '- [x]' : '- [ ]';\n}\n\n\nexport class MarkDownWrap extends React.Component<MDProps, MDState> {\n    renderListItem = (props: any) => {\n        if (props.checked !== null && props.checked !== undefined) {\n            const lineIndex = props.sourcePosition.start.line - 1;\n            return (\n                <li><CheckBox\n                    checked={props.checked} \n                    onChange={ev => this.toggleCheckbox(ev, lineIndex, props.checked)}\n                    children={props.children}/></li>\n            );\n        }\n        // otherwise default to list item\n        return defaultListItem(props);\n      }\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            value: props.value\n        };\n    }\n\n    setValue(value: string) {\n        this.setState({\n            value\n        });\n\n        this.props.onChange(value);\n    }\n\n    toggleCheckbox(ev: React.ChangeEvent<HTMLInputElement>, lineIndex: number, checked: boolean) {\n        const lines = this.state.value.split('\\n');\n\n        lines[lineIndex] = lines[lineIndex].replace(\n            generateCheckbox(checked),\n            generateCheckbox(!checked)\n        );\n        this.setValue(lines.join('\\n'));\n    }\n\n    render() {\n        return (\n            <ReactMarkdown source={this.state.value}\n                renderers={{listItem: this.renderListItem}}\n                rawSourcePos={true}/>\n        );\n    }\n}","export function previousLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i > 0) {\n        return lines[i-1];\n    }\n    return undefined;\n}\n\nexport function currentLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i < lines.length) {\n        return lines[i];\n    }\n    return undefined;\n}\n\nexport function lineStart(str: string, position: number): number {\n    const lines = str.split('\\n');\n    let i = 0;\n    let start = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        start += lines[i].length + 1;\n        i += 1;\n    }\n    return start;\n}\n\nexport const listRegExp = /^([\\s>]*)(([-*]|(([0-9]+)\\.))\\s(\\[[ x]\\])?)?/;","import * as React from 'react';\n\nimport ReactMde, { commands, TextState, TextApi } from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { getNote, saveNote } from '../../util/note';\nimport { Note, colors, Color } from '../../util/types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faEyeDropper, faCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\n\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { previousLine, listRegExp, currentLine, lineStart } from '../../util/strs';\nimport { CommandGroup, GetIcon } from 'react-mde/lib/definitions/types';\n\ntype Tab = 'write' | 'preview';\n\ninterface NoteState {\n    note: Note;\n    tab: Tab;\n    editTitle: boolean;\n}\n\nexport function colorClass(color: Color) {\n    return color;\n}\n\nexport class NoteComponent extends React.Component<{}, NoteState> {\n    input?: HTMLTextAreaElement;\n\n    commands: CommandGroup[] = [\n        ...commands.getDefaultCommands(),\n        {\n            commands: [\n                {\n                    name: 'Test',\n                    icon: (getIconFromProvider: GetIcon) => (\n                        <FontAwesomeIcon icon={faEyeDropper}/>\n                    ),\n                    children: colors.map(color => (\n                        {\n                            name: 'C1',\n                            icon: (getIconFromProvider: GetIcon) => (\n                                <span style={{color}}>\n                                    <FontAwesomeIcon icon={faCircle}/>\n                                </span>\n                            ),\n                            execute: (state: TextState, api: TextApi) => {\n                                this.setColor(color);\n                            }\n                        }))\n                }\n            ]\n        }\n    ];\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            note: {\n                markdown: '',\n                id: -1,\n                name: 'Placeholder',\n                color: 'white'\n            },\n            tab: 'write',\n            editTitle: false\n        };\n    }\n\n    componentDidMount() {\n        const noteId = (this.props as any).match.params.noteId;\n\n        const note = getNote(noteId);\n\n        if (note) {\n            this.setState({\n                note\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        let input = document.getElementsByClassName('mde-text');\n        if (input.length > 0 && !this.input) {\n            this.input = input[0] as HTMLTextAreaElement;\n\n            this.input.addEventListener('keydown', this.handleKeyPress.bind(this));\n        }\n    }\n\n    handleKeyPress(ev: KeyboardEvent) {\n        if (ev.key === 'Enter') {\n            setTimeout(() => {\n                this.handleEnter(ev);\n            }, 10);\n        } else if (ev.key === 'Tab') {\n            ev.preventDefault();\n            setTimeout(() => {\n                this.handleTab(ev);\n            }, 10);\n        }\n    }\n\n    handleTab(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const currLine = currentLine(note, position);\n        if (currLine) {\n            const match = currLine.match(listRegExp);\n            if (match) {\n                const start = lineStart(note, position);\n                if (ev.shiftKey) {\n                    if (match[1].length >= 4) {\n                        const newVal = [note.slice(0, start), note.slice(start+4)].join('');\n                        this.setValue(newVal);\n                        setTimeout(() => {\n                            (ev.target as any).selectionStart =  position - 4;\n                            (ev.target as any).selectionEnd =  position - 4;\n                        }, 0);\n                    }\n                } else {\n                    const newVal = [note.slice(0, start), '    ', note.slice(start)].join('');\n                    this.setValue(newVal);\n                    setTimeout(() => {\n                        (ev.target as any).selectionStart =  position + 4;\n                        (ev.target as any).selectionEnd =  position + 4;\n                    }, 0);\n                }\n            }\n        }\n    }\n\n    handleEnter(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const prevLine = previousLine(note, position);\n        if (prevLine) {\n            const match = prevLine.match(listRegExp);\n            if (match) {\n                let str = match[1];\n                if (match[5] !== undefined) {\n                    str += `${parseInt(match[5]) + 1}. `\n                } else if (match[3] !== undefined) {\n                    str += `${match[3]} `;\n                }\n                if (match[6]) {\n                    str += `${match[6]} `;\n                }\n                const newVal = [note.slice(0, position), str, note.slice(position)].join('');\n                \n                this.setValue(newVal);\n                setTimeout(() => {\n                    (ev.target as any).selectionStart =  position + str.length;\n                    (ev.target as any).selectionEnd =  position + str.length;\n                }, 0);\n            }\n        }\n    }\n\n    setValue(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                markdown: value\n            }\n        });\n\n        saveNote({\n            ...this.state.note,\n            markdown: value\n        });\n    }\n\n    setTab(tab: Tab) {\n        this.setState({\n            tab\n        });\n    }\n\n    setColor(color: Color) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                color\n            }\n        });\n\n        saveNote({\n            ...this.state.note,\n            color\n        });\n    }\n\n    toggleEdit() {\n        this.setState({\n            editTitle: !this.state.editTitle\n        });\n    }\n\n    setName(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                name: value\n            }\n        });\n\n        saveNote({\n            ...this.state.note,\n            name: value\n        });\n    }\n\n    editKeyUp(ev: React.KeyboardEvent) {\n        if (ev.nativeEvent.key === 'Enter') {\n            this.toggleEdit();\n        }\n    }\n\n    render() {\n        let title;\n        if (!this.state.editTitle) {\n            title = (\n                <div className=\"note-title\" onClick={() => this.toggleEdit()}>\n                    {this.state.note.name}\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            );\n        } else {\n            title = (\n                <div className=\"note-title\">\n                    <input value={this.state.note.name}\n                        onChange={val => this.setName(val.target.value)}\n                        onKeyUp={ev => this.editKeyUp(ev)}\n                        autoFocus={true}\n                        className=\"editName\"/>\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {title}\n                <ReactMde\n                    value={this.state.note.markdown}\n                    onChange={ev => this.setValue(ev)}\n                    selectedTab={this.state.tab}\n                    onTabChange={ev => this.setTab(ev)}\n                    generateMarkdownPreview={markdown =>\n                        Promise.resolve(\n                            <MarkDownWrap\n                                value={this.state.note.markdown}\n                                onChange={value => this.setValue(value)}/>\n                        )\n                    }\n                    commands={this.commands}\n                    classes={{\n                        textArea: colorClass(this.state.note.color),\n                        preview: colorClass(this.state.note.color)\n                    }}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { getNote } from \"../../util/note\";\n\nimport './style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { colorClass } from '../note/Note';\nimport { Color } from '../../util/types';\n\ninterface NotePreviewProps {\n    id: number;\n    deleteClicked: (id:  number) => void;\n}\n\ninterface NotePreviewState {\n    markdown: string;\n    name: string;\n    color: Color;\n}\n\nexport class NotePreview extends React.Component<NotePreviewProps, NotePreviewState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            markdown: '',\n            name: '',\n            color: 'white'\n        };\n\n        const note = getNote(this.props.id);\n\n        if (note) {\n            this.state = {\n                markdown: note.markdown,\n                name: note.name,\n                color: note.color\n            };\n        }\n    }\n\n    delete(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.deleteClicked(this.props.id);\n    }\n\n    render() {\n        return (\n            <div className={`preview ${colorClass(this.state.color)}`}>\n                <div className=\"title\">\n                    {this.state.name}\n                    <span className=\"delete\" onClick={ev => this.delete(ev)}>\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </span>\n                </div>\n                <MarkDownWrap\n                    value={this.state.markdown}\n                    onChange={() => {}}/>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Note } from '../../util/types';\nimport { Route } from 'react-router-dom';\nimport { getNotes, newNote, deleteNote, copyNote, NoteType, noteContent } from '../../util/note';\nimport { NotePreview } from '../note-preview/NotePreview';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\n\nimport './style.css';\n\ninterface HomeState {\n    notes: Note[];\n    choosing: boolean;\n}\n\nexport class Home extends React.Component<{}, HomeState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            notes: [],\n            choosing: false\n        };\n    }\n\n    componentDidMount(){\n        this.setState({\n            notes: getNotes()\n        });\n    }\n\n    newNote(history: any, type: NoteType = 'empty') {\n        const id = newNote(noteContent(type));\n\n        history.push(`/note/${id}`)\n    }\n\n    toNote(id: number, history: any) {\n        history.push(`/note/${id}`)\n    }\n\n    deleteNote(id: number) {\n        const notes = deleteNote(id);\n        this.setState({\n            notes: notes\n        });\n    }\n\n    copyNote(id: number) {\n        const notes = copyNote(id);\n        this.setState({\n            notes: notes\n        });\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"home\">\n                <table className=\"home\">\n                    <tbody>\n                        <tr className=\"actions\">\n                            <td className=\"actions\">\n                                <button className=\"pure-button mr-2\" onClick={() => this.newNote(history)}>\n                                    <FontAwesomeIcon icon={faPlus}/>\n                                </button>\n                                <button className=\"pure-button\" onClick={() => this.newNote(history, 'checklist')}>\n                                    <FontAwesomeIcon icon={faCheckSquare}/>\n                                </button>\n                            </td>\n                        </tr>\n                        {this.state.notes.map(note => {\n                            return <tr className=\"note\" key={note.id}>\n                                <td className=\"note\" onClick={() => this.toNote(note.id, history)}>\n                                    <NotePreview id={note.id} deleteClicked={id => this.deleteNote(id)}/>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )} />;\n    }\n}","import React from 'react';\nimport { NoteComponent } from './components/note/Note';\n\nimport 'purecss/build/base-min.css';\nimport 'purecss/build/buttons-min.css';\nimport 'purecss/build/grids-responsive-min.css';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Home } from './components/home/Home';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <div className=\"pure-g center\">\n        <div className=\"pure-u-1 pure-u-md-1-5\">\n        </div>\n        <div className=\"pure-u-1 pure-u-md-3-5\">\n          <Router>\n            <Switch>\n              <Route path=\"/note/:noteId\" component={NoteComponent}>\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
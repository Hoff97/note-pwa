{"version":3,"sources":["util/types.ts","components/checkbox/checkbox.tsx","components/mdWrap/MarkDownWrap.tsx","util/strs.ts","util/emitter.ts","network/login.service.ts","network/entity.service.ts","util/note.ts","network/sync.service.ts","components/note/Note.tsx","components/note-preview/NotePreview.tsx","components/home/Home.tsx","components/login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","toNetworkData","data","copy","id","timestamp","fromNetworkData","synchronized","CheckBox","checked","onChange","children","className","type","ev","generateCheckbox","MarkDownWrap","props","renderListItem","undefined","lineIndex","sourcePosition","start","line","toggleCheckbox","defaultListItem","state","value","this","setState","lines","split","replace","setValue","join","source","renderers","listItem","rawSourcePos","React","listRegExp","Emitter","subscribers","subscriber","push","LoginService","token","localStorage","getItem","localStorageKey","loggedInEv","username","password","fetch","urlPrefix","method","headers","body","JSON","stringify","response","json","setItem","emit","loginService","EntityService","name","getToken","map","x","entity","noteService","entityService","subscribe","getEntities","then","entities","parse","loggedIn","fetchEntities","localEntities","getEntitiesLocal","entMap","makeMap","localEntMap","newEnts","localNewEnts","updates","localEnt","localDate","Date","remoteDate","e","ent","localNew","createEntity","localUp","updateEntity","storeEntities","uuidv4","genId","toISOString","created","i","length","deleteEntity","notes","splice","ret","NoteComponent","input","commands","getDefaultCommands","icon","getIconFromProvider","faEyeDropper","color","style","faCircle","execute","api","setColor","note","markdown","tab","editTitle","noteId","match","params","getEntity","document","getElementsByClassName","addEventListener","handleKeyPress","bind","key","setTimeout","handleEnter","preventDefault","handleTab","position","target","selectionStart","currLine","str","currentLine","lineStart","shiftKey","newVal","slice","selectionEnd","prevLine","previousLine","parseInt","nativeEvent","toggleEdit","title","val","setName","onKeyUp","editKeyUp","autoFocus","faPen","onClick","selectedTab","onTabChange","setTab","generateMarkdownPreview","Promise","resolve","classes","textArea","preview","NotePreview","stopPropagation","deleteClicked","delete","faTrash","Component","Home","context","choosing","history","logout","render","newNote","faPlus","faCheckSquare","faSignOutAlt","login","faUser","toNote","deleteNote","Login","register","email","pw","error","onSubmit","placeholder","App","basename","process","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","StrictMode","getElementById","URL","href","origin","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9c7c777f.chunk.js","sourcesContent":["export type Color = 'white' | 'red' | 'green' | 'blue' | 'orange';\n\nexport const colors: Color[] = ['white', 'red', 'green', 'blue', 'orange'];\n\nexport interface HasId {\n    id: string;\n}\n\nexport interface HasTimestamp {\n    timestamp: string;\n}\n\nexport interface HasIdTimestamp extends HasId, HasTimestamp {\n    synchronized: boolean;\n}\n\nexport interface Note extends HasIdTimestamp {\n    name: string;\n    markdown: string;\n    color: Color;\n}\n\nexport type NoteType = 'empty' | 'checklist';\n\nexport type WithoutIdTimestamp<T> = Omit<Omit<Omit<T, 'id'>, 'timestamp'>, 'synchronized'>;\n\nexport interface NetworkData<T extends HasIdTimestamp> {\n    id: string;\n    timestamp: string;\n    data: WithoutIdTimestamp<T>;\n}\n\nexport function toNetworkData<T extends HasIdTimestamp>(data: T): NetworkData<T> {\n    const copy = {\n        ...data\n    };\n    delete copy.id;\n    delete copy.timestamp;\n\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        data: copy\n    };\n}\n\nexport function fromNetworkData<T extends HasIdTimestamp>(data: NetworkData<T>): T {\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        synchronized: true,\n        ...data.data\n    } as any;\n}\n\nexport interface NetworkNote extends NetworkData<Note> {\n\n};\n\nexport type NewNote = WithoutIdTimestamp<Note>;","import * as React from 'react';\n\nimport './style.css';\n\ninterface CheckboxProps {\n    checked: boolean;\n    children: JSX.Element[];\n    onChange: (change: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport function CheckBox({ checked, onChange, children }: CheckboxProps) {\n    return (\n        <label className=\"checkbox-container\">{children}\n            <input type=\"checkbox\" checked={checked} onChange={ev => onChange(ev)}/>\n            <span className=\"checkbox-checkmark\"></span>\n        </label>\n    );\n}","import * as React from 'react';\n\nimport ReactMarkdown from 'react-markdown';\n\n\nimport {listItem as defaultListItem} from 'react-markdown/lib/renderers';\nimport { CheckBox } from '../checkbox/checkbox';\n\ninterface MDState {\n    value: string;\n}\n\ninterface MDProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nfunction generateCheckbox(checked: boolean) {\n    return checked ? '- [x]' : '- [ ]';\n}\n\n\nexport class MarkDownWrap extends React.Component<MDProps, MDState> {\n    renderListItem = (props: any) => {\n        if (props.checked !== null && props.checked !== undefined) {\n            const lineIndex = props.sourcePosition.start.line - 1;\n            return (\n                <li><CheckBox\n                    checked={props.checked} \n                    onChange={ev => this.toggleCheckbox(ev, lineIndex, props.checked)}\n                    children={props.children}/></li>\n            );\n        }\n        // otherwise default to list item\n        return defaultListItem(props);\n      }\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            value: props.value\n        };\n    }\n\n    setValue(value: string) {\n        this.setState({\n            value\n        });\n\n        this.props.onChange(value);\n    }\n\n    toggleCheckbox(ev: React.ChangeEvent<HTMLInputElement>, lineIndex: number, checked: boolean) {\n        const lines = this.state.value.split('\\n');\n\n        lines[lineIndex] = lines[lineIndex].replace(\n            generateCheckbox(checked),\n            generateCheckbox(!checked)\n        );\n        this.setValue(lines.join('\\n'));\n    }\n\n    render() {\n        return (\n            <ReactMarkdown source={this.state.value}\n                renderers={{listItem: this.renderListItem}}\n                rawSourcePos={true}/>\n        );\n    }\n}","export function previousLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i > 0) {\n        return lines[i-1];\n    }\n    return undefined;\n}\n\nexport function currentLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i < lines.length) {\n        return lines[i];\n    }\n    return undefined;\n}\n\nexport function lineStart(str: string, position: number): number {\n    const lines = str.split('\\n');\n    let i = 0;\n    let start = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        start += lines[i].length + 1;\n        i += 1;\n    }\n    return start;\n}\n\nexport const listRegExp = /^([\\s>]*)(([-*]|(([0-9]+)\\.))\\s(\\[[ x]\\])?)?/;","type Subscriber<T> = (value: T) => void;\n\nexport class Emitter<T> {\n    private subscribers: Subscriber<T>[] = [];\n\n    public subscribe(subscriber: Subscriber<T>) {\n        this.subscribers.push(subscriber);\n    }\n\n    public emit(value: T) {\n        for (let subscriber of this.subscribers) {\n            subscriber(value);\n        }\n    }\n}","import { Emitter } from \"../util/emitter\";\nimport { urlPrefix } from \"./entity.service\";\n\nexport class LoginService {\n    static localStorageKey = 'token';\n\n    token: string | null = localStorage.getItem(LoginService.localStorageKey);\n\n    loggedInEv = new Emitter<void>();\n\n    public async login(username: string, password: string) {\n        const response = await fetch(`${urlPrefix}/api-token-auth/`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username, password\n            })\n        });\n\n        const json = await response.json();\n        this.token = json.token;\n        localStorage.setItem(LoginService.localStorageKey, json.token);\n\n        this.loggedInEv.emit();\n\n        return this.token;\n    }\n\n    logout() {\n        this.token = null;\n    }\n\n    public async register(username: string, password: string) {\n        const response = await fetch(`${urlPrefix}/api-token-auth/`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username, password\n            })\n        });\n\n        const json = await response.json();\n        this.token = json.token;\n        localStorage.setItem(LoginService.localStorageKey, json.token);\n\n        this.loggedInEv.emit();\n\n        return this.token;\n    }\n\n    loggedIn(): boolean {\n        return !!this.token;\n    }\n\n    getToken(): string | null {\n        return this.token;\n    }\n}\n\nexport const loginService = new LoginService();","import { toNetworkData, fromNetworkData, HasIdTimestamp } from \"../util/types\";\nimport { loginService } from \"./login.service\";\n\nexport const urlPrefix = 'https://detext.haskai.de/syncify/api';\n\nexport class EntityService<T extends HasIdTimestamp> {\n\n    constructor(private name: string) {\n\n    }\n\n    async fetchEntities(): Promise<T[]> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n\n        const json = await response.json();\n        return json.map((x: any) => fromNetworkData(x));\n    }\n\n    async createEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async updateEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/${entity.id}/?tpe=${this.name}`, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async deleteEntity(id: string): Promise<void> {\n        await fetch(`${urlPrefix}/entity/${id}/?tpe=${this.name}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n    }\n}","import { EntityService } from \"../network/entity.service\";\nimport { SyncService } from \"../network/sync.service\";\nimport { Note } from \"./types\";\n\nconst noteNetworkService = new EntityService<Note>('note');\nexport const noteService = new SyncService<Note>(noteNetworkService, 'note');","import { HasIdTimestamp, WithoutIdTimestamp } from \"../util/types\";\nimport { EntityService } from \"./entity.service\";\nimport { loginService } from \"./login.service\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class SyncService<T extends HasIdTimestamp> {\n    constructor(private entityService: EntityService<T>, private name: string){\n        loginService.loggedInEv.subscribe(() => {\n            this.getEntities().then(x => {\n            });\n        });\n    }\n\n    storeEntities(entities: T[]) {\n        localStorage.setItem(this.name, JSON.stringify(entities));\n    }\n\n    getEntitiesLocal(): T[] {\n        let entities = localStorage.getItem(this.name);\n        if (entities === null) {\n            entities = \"[]\";\n        }\n        return JSON.parse(entities);\n    }\n\n    async getEntities(): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                let entities = await this.entityService.fetchEntities();\n\n                const localEntities = this.getEntitiesLocal();\n\n                const entMap = this.makeMap(entities);\n                const localEntMap = this.makeMap(localEntities);\n\n                const newEnts: T[] = [];\n                const localNewEnts: T[] = [];\n                const updates: T[] = [];\n\n                for (let localEnt of localEntities) {\n                    if (entMap[localEnt.id] !== undefined) {\n                        const localDate = new Date(localEnt.timestamp);\n                        const remoteDate = new Date(entMap[localEnt.id].timestamp);\n                        if (localDate > remoteDate) {\n                            updates.push(localEnt);\n                        } else {\n                            newEnts.push(entMap[localEnt.id]);\n                        }\n                    } else if (!localEnt.synchronized) {\n                        localNewEnts.push(localEnt);\n                    }\n                }\n\n                for (let ent of entities) {\n                    if (localEntMap[ent.id] === undefined) {\n                        newEnts.push(ent);\n                    }\n                }\n\n                for (let localNew of localNewEnts) {\n                    await this.entityService.createEntity(localNew);\n                }\n                for (let localUp of updates) {\n                    await this.entityService.updateEntity(localUp);\n                }\n\n                entities = [\n                    ...newEnts,\n                    ...localNewEnts,\n                    ...updates\n                ];\n\n                this.storeEntities(entities);\n                return entities;\n            } catch (e) {\n            }\n        }\n        return this.getEntitiesLocal();\n    }\n\n    genId(): string {\n        return uuidv4();\n    }\n\n    async createEntity(entity: WithoutIdTimestamp<T>): Promise<string> {\n        const copy: T = {\n            id: this.genId(),\n            timestamp: (new Date()).toISOString(),\n            ...entity\n        } as any;\n\n        let created;\n        if (loginService.loggedIn()) {\n            try {\n                created = await this.entityService.createEntity(copy);\n            } catch (e) {\n                created = copy;\n            }\n        } else {\n            created = copy;\n        }\n\n        const localEntities = this.getEntitiesLocal();\n        localEntities.push(created);\n\n        this.storeEntities(localEntities);\n\n        return created.id;\n    }\n\n    async updateEntity(entity: T) {\n        entity.timestamp = (new Date()).toISOString();\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.updateEntity(entity);\n            } catch (e) {\n            }\n        }\n\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == entity.id) {\n                entities[i] = entity;\n                break;\n            }\n        }\n\n        this.storeEntities(entities);\n    }\n\n    getEntity(id: string): T | undefined {\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == id) {\n                return entities[i];\n            }\n        }\n\n        return undefined;\n    }\n\n    async deleteEntity(id: string): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.deleteEntity(id);\n            } catch {\n            }\n        }\n        const notes = this.getEntitiesLocal();\n\n        for (let i = 0; i < notes.length; i++) {\n            // eslint-disable-next-line\n            if (notes[i].id == id) {\n                notes.splice(i, 1);\n                break;\n            }\n        }\n\n        this.storeEntities(notes);\n\n        return notes;\n    }\n\n    private makeMap(entities: T[]): {[key: string]: T} {\n        const ret: {[key: string]: T} = {};\n        for (let entity of entities) {\n            ret[entity.id] = entity;\n        }\n        return ret;\n    }\n}","import * as React from 'react';\n\nimport ReactMde, { commands, TextState, TextApi } from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { Note, colors, Color } from '../../util/types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faEyeDropper, faCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\n\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { previousLine, listRegExp, currentLine, lineStart } from '../../util/strs';\nimport { CommandGroup, GetIcon } from 'react-mde/lib/definitions/types';\nimport { noteService } from '../../util/note';\n\ntype Tab = 'write' | 'preview';\n\ninterface NoteState {\n    note: Note;\n    tab: Tab;\n    editTitle: boolean;\n}\n\nexport function colorClass(color: Color) {\n    return color;\n}\n\nexport class NoteComponent extends React.Component<{}, NoteState> {\n    input?: HTMLTextAreaElement;\n\n    commands: CommandGroup[] = [\n        ...commands.getDefaultCommands(),\n        {\n            commands: [\n                {\n                    name: 'Test',\n                    icon: (getIconFromProvider: GetIcon) => (\n                        <FontAwesomeIcon icon={faEyeDropper}/>\n                    ),\n                    children: colors.map(color => (\n                        {\n                            name: 'C1',\n                            icon: (getIconFromProvider: GetIcon) => (\n                                <span style={{color}}>\n                                    <FontAwesomeIcon icon={faCircle}/>\n                                </span>\n                            ),\n                            execute: (state: TextState, api: TextApi) => {\n                                this.setColor(color);\n                            }\n                        }))\n                }\n            ]\n        }\n    ];\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            note: {\n                markdown: '',\n                id: '',\n                name: 'Placeholder',\n                color: 'white',\n                timestamp: '',\n                synchronized: false\n            },\n            tab: 'write',\n            editTitle: false\n        };\n    }\n\n    componentDidMount() {\n        const noteId = (this.props as any).match.params.noteId;\n\n        const note = noteService.getEntity(noteId);\n\n        if (note) {\n            this.setState({\n                note\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        let input = document.getElementsByClassName('mde-text');\n        if (input.length > 0 && !this.input) {\n            this.input = input[0] as HTMLTextAreaElement;\n\n            this.input.addEventListener('keydown', this.handleKeyPress.bind(this));\n        }\n    }\n\n    handleKeyPress(ev: KeyboardEvent) {\n        if (ev.key === 'Enter') {\n            setTimeout(() => {\n                this.handleEnter(ev);\n            }, 10);\n        } else if (ev.key === 'Tab') {\n            ev.preventDefault();\n            setTimeout(() => {\n                this.handleTab(ev);\n            }, 10);\n        }\n    }\n\n    handleTab(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const currLine = currentLine(note, position);\n        if (currLine) {\n            const match = currLine.match(listRegExp);\n            if (match) {\n                const start = lineStart(note, position);\n                if (ev.shiftKey) {\n                    if (match[1].length >= 4) {\n                        const newVal = [note.slice(0, start), note.slice(start+4)].join('');\n                        this.setValue(newVal);\n                        setTimeout(() => {\n                            (ev.target as any).selectionStart =  position - 4;\n                            (ev.target as any).selectionEnd =  position - 4;\n                        }, 0);\n                    }\n                } else {\n                    const newVal = [note.slice(0, start), '    ', note.slice(start)].join('');\n                    this.setValue(newVal);\n                    setTimeout(() => {\n                        (ev.target as any).selectionStart =  position + 4;\n                        (ev.target as any).selectionEnd =  position + 4;\n                    }, 0);\n                }\n            }\n        }\n    }\n\n    handleEnter(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const prevLine = previousLine(note, position);\n        if (prevLine) {\n            const match = prevLine.match(listRegExp);\n            if (match) {\n                let str = match[1];\n                if (match[5] !== undefined) {\n                    str += `${parseInt(match[5]) + 1}. `\n                } else if (match[3] !== undefined) {\n                    str += `${match[3]} `;\n                }\n                if (match[6]) {\n                    str += `${match[6]} `;\n                }\n                const newVal = [note.slice(0, position), str, note.slice(position)].join('');\n                \n                this.setValue(newVal);\n                setTimeout(() => {\n                    (ev.target as any).selectionStart =  position + str.length;\n                    (ev.target as any).selectionEnd =  position + str.length;\n                }, 0);\n            }\n        }\n    }\n\n    setValue(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                markdown: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            markdown: value\n        });\n    }\n\n    setTab(tab: Tab) {\n        this.setState({\n            tab\n        });\n    }\n\n    setColor(color: Color) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                color\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            color\n        });\n    }\n\n    toggleEdit() {\n        this.setState({\n            editTitle: !this.state.editTitle\n        });\n    }\n\n    setName(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                name: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            name: value\n        });\n    }\n\n    editKeyUp(ev: React.KeyboardEvent) {\n        if (ev.nativeEvent.key === 'Enter') {\n            this.toggleEdit();\n        }\n    }\n\n    render() {\n        let title;\n        if (!this.state.editTitle) {\n            title = (\n                <div className=\"note-title\" onClick={() => this.toggleEdit()}>\n                    {this.state.note.name}\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            );\n        } else {\n            title = (\n                <div className=\"note-title\">\n                    <input value={this.state.note.name}\n                        onChange={val => this.setName(val.target.value)}\n                        onKeyUp={ev => this.editKeyUp(ev)}\n                        autoFocus={true}\n                        className=\"editName\"/>\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {title}\n                <ReactMde\n                    value={this.state.note.markdown}\n                    onChange={ev => this.setValue(ev)}\n                    selectedTab={this.state.tab}\n                    onTabChange={ev => this.setTab(ev)}\n                    generateMarkdownPreview={markdown =>\n                        Promise.resolve(\n                            <MarkDownWrap\n                                value={this.state.note.markdown}\n                                onChange={value => this.setValue(value)}/>\n                        )\n                    }\n                    commands={this.commands}\n                    classes={{\n                        textArea: colorClass(this.state.note.color),\n                        preview: colorClass(this.state.note.color)\n                    }}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport './style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { colorClass } from '../note/Note';\nimport { Color } from '../../util/types';\nimport { noteService } from '../../util/note';\n\ninterface NotePreviewProps {\n    id: string;\n    deleteClicked: (id: string) => void;\n}\n\ninterface NotePreviewState {\n    markdown: string;\n    name: string;\n    color: Color;\n}\n\nexport class NotePreview extends React.Component<NotePreviewProps, NotePreviewState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            markdown: '',\n            name: '',\n            color: 'white'\n        };\n\n        const note = noteService.getEntity(this.props.id);\n\n        if (note) {\n            this.state = {\n                markdown: note.markdown,\n                name: note.name,\n                color: note.color\n            };\n        }\n    }\n\n    delete(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.deleteClicked(this.props.id);\n    }\n\n    render() {\n        return (\n            <div className={`preview ${colorClass(this.state.color)}`}>\n                <div className=\"title\">\n                    {this.state.name}\n                    <span className=\"delete\" onClick={ev => this.delete(ev)}>\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </span>\n                </div>\n                <MarkDownWrap\n                    value={this.state.markdown}\n                    onChange={() => {}}/>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Note, NewNote, NoteType } from '../../util/types';\nimport { Route } from 'react-router-dom';\nimport { NotePreview } from '../note-preview/NotePreview';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faCheckSquare, faUser, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\nimport { noteService } from '../../util/note';\n\ninterface HomeState {\n    notes: Note[];\n    choosing: boolean;\n    loggedIn: boolean;\n}\n\nexport class Home extends React.Component<{}, HomeState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            notes: [],\n            choosing: false,\n            loggedIn: false\n        };\n    }\n\n    componentDidMount(){\n        noteService.getEntities().then(notes => {\n            this.setState({\n                notes\n            });\n        });\n\n        if (loginService.loggedIn()) {\n            this.setState({\n                loggedIn: true\n            });\n        }\n    }\n\n    async newNote(history: any, type: NoteType = 'empty') {\n        const note: NewNote = {\n            name: 'New Note',\n            markdown: type === 'empty' ? '' : '- [ ] ',\n            color: 'white'\n        }\n\n        const id = await noteService.createEntity(note);\n\n        history.push(`/note/${id}`);\n    }\n\n    toNote(id: string, history: any) {\n        history.push(`/note/${id}`);\n    }\n\n    deleteNote(id: string) {\n        noteService.deleteEntity(id).then(notes => {\n            this.setState({\n                notes: notes\n            });\n        });\n    }\n\n    login(history: any) {\n        history.push(`/login/`)\n    }\n\n    logout() {\n        loginService.logout();\n        this.setState({\n            loggedIn: loginService.loggedIn()\n        });\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"home\">\n                <table className=\"home\">\n                    <tbody>\n                        <tr className=\"actions\">\n                            <td className=\"actions\">\n                                <button className=\"pure-button mr-2\" onClick={() => this.newNote(history)}>\n                                    <FontAwesomeIcon icon={faPlus}/>\n                                </button>\n                                <button className=\"pure-button\" onClick={() => this.newNote(history, 'checklist')}>\n                                    <FontAwesomeIcon icon={faCheckSquare}/>\n                                </button>\n                                {!this.state.loggedIn ? (\n                                    <button className=\"pure-button login\" onClick={() => this.login(history)}>\n                                        <FontAwesomeIcon icon={faUser}/>\n                                    </button>\n                                    ) : (\n                                    <button className=\"pure-button logout\" onClick={() => this.logout()}>\n                                        <FontAwesomeIcon icon={faSignOutAlt}/>\n                                    </button>\n                                    )\n                                }\n                            </td>\n                        </tr>\n                        {this.state.notes.map(note => {\n                            return <tr className=\"note\" key={note.id}>\n                                <td className=\"note\" onClick={() => this.toNote(note.id, history)}>\n                                    <NotePreview id={note.id} deleteClicked={id => this.deleteNote(id)}/>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )} />;\n    }\n}","import * as React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\n\ninterface LoginState {\n    error?: string;\n    register: boolean;\n}\n\nexport class Login extends React.Component<{}, LoginState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            register: false\n        };\n    }\n\n    login(history: any, ev: React.FormEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        const email = (ev.target as any)[1].value;\n        const pw = (ev.target as any)[2].value;\n\n        if (this.state.register) {\n            const pwr = (ev.target as any)[3].value;\n\n            if (pw === pwr) {\n                loginService.register(email, pw).then(token => {\n                    if (token !== undefined) {\n                        history.push(`/`);\n                    } else {\n                        this.setState({\n                            error: 'Could not log in'\n                        });\n                    }\n                });\n            } else {\n                this.setState({\n                    error: 'Passwords do not match'\n                });\n            }\n        } else {\n            loginService.login(email, pw).then(token => {\n                if (token !== undefined) {\n                    history.push(`/`);\n                } else {\n                    this.setState({\n                        error: 'Could not log in'\n                    });\n                }\n            });\n        }\n    }\n\n    toggleRegister() {\n        this.setState({\n            register: !this.state.register\n        });\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"login\">\n                <form className=\"pure-form\"\n                        onSubmit={ev => this.login(history, ev)}>\n                    <fieldset>\n                        <legend>Login</legend>\n\n                        <input type=\"username\" placeholder=\"Username\"/>\n                        <input type=\"password\" placeholder=\"Password\"/>\n                        {this.state.register ?\n                            <input type=\"password\" placeholder=\"Repeat Password\"/> :\n                            <span></span>\n                        }\n\n                        <button type=\"submit\" className=\"pure-button pure-button-primary\">\n                            {this.state.register ? 'Register' : 'Sign in'}\n                        </button>\n\n                        {/*<a onClick={() => this.toggleRegister()}\n                            className=\"ml-1\">\n                            {this.state.register ? 'Sign in' : 'Register'}\n                        </a>*/}\n\n                        {this.state.error ? this.state.error : ''}\n                    </fieldset>\n                </form>\n            </div>\n        )} />;\n    }\n}","import React from 'react';\nimport { NoteComponent } from './components/note/Note';\n\nimport 'purecss/build/base-min.css';\nimport 'purecss/build/buttons-min.css';\nimport 'purecss/build/grids-responsive-min.css';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Home } from './components/home/Home';\nimport { Login } from './components/login/Login';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <div className=\"pure-g center\">\n        <div className=\"pure-u-1 pure-u-md-1-5\">\n        </div>\n        <div className=\"pure-u-1 pure-u-md-3-5\">\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route path=\"/note/:noteId\" component={NoteComponent}>\n              </Route>\n              <Route path=\"/login/\">\n                <Login />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
{"version":3,"sources":["util/types.ts","components/checkbox/checkbox.tsx","components/mdWrap/MarkDownWrap.tsx","util/strs.ts","util/emitter.ts","network/login.service.ts","network/entity.service.ts","util/note.ts","network/sync.service.ts","components/note/Note.tsx","components/note-preview/NotePreview.tsx","components/home/Home.tsx","components/login/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","toNetworkData","data","copy","id","timestamp","fromNetworkData","CheckBox","checked","onChange","children","className","type","ev","generateCheckbox","MarkDownWrap","props","renderListItem","undefined","lineIndex","sourcePosition","start","line","toggleCheckbox","defaultListItem","state","value","this","setState","lines","split","replace","setValue","join","source","renderers","listItem","rawSourcePos","React","listRegExp","Emitter","subscribers","subscriber","push","LoginService","token","localStorage","getItem","localStorageKey","loggedInEv","username","password","fetch","urlPrefix","method","headers","body","JSON","stringify","response","console","log","json","setItem","loginService","EntityService","name","getToken","map","x","entity","noteService","entityService","entities","parse","loggedIn","fetchEntities","localEntities","getEntitiesLocal","entMap","makeMap","localEntMap","newEnts","localNewEnts","updates","localEnt","localDate","Date","remoteDate","e","ent","localNew","createEntity","localUp","updateEntity","storeEntities","uuidv4","genId","toISOString","created","i","length","deleteEntity","getEntities","notes","splice","ret","NoteComponent","input","commands","getDefaultCommands","icon","getIconFromProvider","faEyeDropper","color","style","faCircle","execute","api","setColor","note","markdown","tab","editTitle","noteId","match","params","getEntity","document","getElementsByClassName","addEventListener","handleKeyPress","bind","key","setTimeout","handleEnter","preventDefault","handleTab","position","target","selectionStart","currLine","str","currentLine","lineStart","shiftKey","newVal","slice","selectionEnd","prevLine","previousLine","parseInt","nativeEvent","toggleEdit","title","val","setName","onKeyUp","editKeyUp","autoFocus","faPen","onClick","selectedTab","onTabChange","setTab","generateMarkdownPreview","Promise","resolve","classes","textArea","preview","NotePreview","stopPropagation","deleteClicked","delete","faTrash","Component","Home","context","choosing","then","history","render","newNote","faPlus","faCheckSquare","login","faUser","toNote","deleteNote","Login","email","pw","error","onSubmit","placeholder","App","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","getElementById","URL","process","href","origin","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d9c7ebdb.chunk.js","sourcesContent":["export type Color = 'white' | 'red' | 'green' | 'blue' | 'orange';\n\nexport const colors: Color[] = ['white', 'red', 'green', 'blue', 'orange'];\n\nexport interface HasId {\n    id: string;\n}\n\nexport interface HasTimestamp {\n    timestamp: string;\n}\n\nexport interface HasIdTimestamp extends HasId, HasTimestamp {\n\n}\n\nexport interface Note extends HasIdTimestamp {\n    name: string;\n    markdown: string;\n    color: Color;\n}\n\nexport type NoteType = 'empty' | 'checklist';\n\nexport type WithoutIdTimestamp<T> = Omit<Omit<T, 'id'>, 'timestamp'>;\n\nexport interface NetworkData<T extends HasIdTimestamp> {\n    id: string;\n    timestamp: string;\n    data: WithoutIdTimestamp<T>;\n}\n\nexport function toNetworkData<T extends HasIdTimestamp>(data: T): NetworkData<T> {\n    const copy = {\n        ...data\n    };\n    delete copy.id;\n    delete copy.timestamp;\n\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        data: copy\n    };\n}\n\nexport function fromNetworkData<T extends HasIdTimestamp>(data: NetworkData<T>): T {\n    return {\n        id: data.id,\n        timestamp: data.timestamp,\n        ...data.data\n    } as any;\n}\n\nexport interface NetworkNote extends NetworkData<Note> {\n\n};\n\nexport type NewNote = WithoutIdTimestamp<Note>;","import * as React from 'react';\n\nimport './style.css';\n\ninterface CheckboxProps {\n    checked: boolean;\n    children: JSX.Element[];\n    onChange: (change: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport function CheckBox({ checked, onChange, children }: CheckboxProps) {\n    return (\n        <label className=\"checkbox-container\">{children}\n            <input type=\"checkbox\" checked={checked} onChange={ev => onChange(ev)}/>\n            <span className=\"checkbox-checkmark\"></span>\n        </label>\n    );\n}","import * as React from 'react';\n\nimport ReactMarkdown from 'react-markdown';\n\n\nimport {listItem as defaultListItem} from 'react-markdown/lib/renderers';\nimport { CheckBox } from '../checkbox/checkbox';\n\ninterface MDState {\n    value: string;\n}\n\ninterface MDProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nfunction generateCheckbox(checked: boolean) {\n    return checked ? '- [x]' : '- [ ]';\n}\n\n\nexport class MarkDownWrap extends React.Component<MDProps, MDState> {\n    renderListItem = (props: any) => {\n        if (props.checked !== null && props.checked !== undefined) {\n            const lineIndex = props.sourcePosition.start.line - 1;\n            return (\n                <li><CheckBox\n                    checked={props.checked} \n                    onChange={ev => this.toggleCheckbox(ev, lineIndex, props.checked)}\n                    children={props.children}/></li>\n            );\n        }\n        // otherwise default to list item\n        return defaultListItem(props);\n      }\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            value: props.value\n        };\n    }\n\n    setValue(value: string) {\n        this.setState({\n            value\n        });\n\n        this.props.onChange(value);\n    }\n\n    toggleCheckbox(ev: React.ChangeEvent<HTMLInputElement>, lineIndex: number, checked: boolean) {\n        const lines = this.state.value.split('\\n');\n\n        lines[lineIndex] = lines[lineIndex].replace(\n            generateCheckbox(checked),\n            generateCheckbox(!checked)\n        );\n        this.setValue(lines.join('\\n'));\n    }\n\n    render() {\n        return (\n            <ReactMarkdown source={this.state.value}\n                renderers={{listItem: this.renderListItem}}\n                rawSourcePos={true}/>\n        );\n    }\n}","export function previousLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i > 0) {\n        return lines[i-1];\n    }\n    return undefined;\n}\n\nexport function currentLine(str: string, position: number): string | undefined {\n    const lines = str.split('\\n');\n    let i = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        i += 1;\n    }\n    if (i < lines.length) {\n        return lines[i];\n    }\n    return undefined;\n}\n\nexport function lineStart(str: string, position: number): number {\n    const lines = str.split('\\n');\n    let i = 0;\n    let start = 0;\n    while(position > lines[i].length) {\n        position -= lines[i].length;\n        position -= 1;\n        start += lines[i].length + 1;\n        i += 1;\n    }\n    return start;\n}\n\nexport const listRegExp = /^([\\s>]*)(([-*]|(([0-9]+)\\.))\\s(\\[[ x]\\])?)?/;","type Subscriber<T> = (value: T) => void;\n\nexport class Emitter<T> {\n    private subscribers: Subscriber<T>[] = [];\n\n    public subscribe(subscriber: Subscriber<T>) {\n        this.subscribers.push(subscriber);\n    }\n\n    public emit(value: T) {\n        for (let subscriber of this.subscribers) {\n            subscriber(value);\n        }\n    }\n}","import { Emitter } from \"../util/emitter\";\nimport { urlPrefix } from \"./entity.service\";\n\nexport class LoginService {\n    static localStorageKey = 'token';\n\n    token: string | null = localStorage.getItem(LoginService.localStorageKey);\n\n    loggedInEv = new Emitter();\n\n    public async login(username: string, password: string) {\n        const response = await fetch(`${urlPrefix}/api-token-auth/`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username, password\n            })\n        });\n\n        console.log(response);\n        const json = await response.json();\n        this.token = json.token;\n        localStorage.setItem(LoginService.localStorageKey, json.token);\n        return this.token;\n    }\n\n    loggedIn(): boolean {\n        return !!this.token;\n    }\n\n    getToken(): string | null {\n        return this.token;\n    }\n}\n\nexport const loginService = new LoginService();","import { toNetworkData, fromNetworkData, HasIdTimestamp } from \"../util/types\";\nimport { loginService } from \"./login.service\";\n\nexport const urlPrefix = 'http://localhost:8000/api';\n\nexport class EntityService<T extends HasIdTimestamp> {\n\n    constructor(private name: string) {\n\n    }\n\n    async fetchEntities(): Promise<T[]> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n\n        const json = await response.json();\n        return json.map((x: any) => fromNetworkData(x));\n    }\n\n    async createEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/?tpe=${this.name}`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async updateEntity(entity: T): Promise<T> {\n        const response = await fetch(`${urlPrefix}/entity/${entity.id}/?tpe=${this.name}`, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            },\n            body: JSON.stringify(toNetworkData(entity))\n        });\n\n        const json = await response.json();\n        return fromNetworkData(json) as any;\n    }\n\n    async deleteEntity(id: string): Promise<void> {\n        await fetch(`${urlPrefix}/entity/${id}/?tpe=${this.name}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Token ${loginService.getToken()}`\n            }\n        });\n    }\n}","import { EntityService } from \"../network/entity.service\";\nimport { SyncService } from \"../network/sync.service\";\nimport { Note } from \"./types\";\n\nconst noteNetworkService = new EntityService<Note>('note');\nexport const noteService = new SyncService<Note>(noteNetworkService, 'note');","import { HasIdTimestamp, WithoutIdTimestamp } from \"../util/types\";\nimport { EntityService } from \"./entity.service\";\nimport { loginService } from \"./login.service\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class SyncService<T extends HasIdTimestamp> {\n    constructor(private entityService: EntityService<T>, private name: string){\n\n    }\n\n    storeEntities(entities: T[]) {\n        localStorage.setItem(this.name, JSON.stringify(entities));\n    }\n\n    getEntitiesLocal(): T[] {\n        let entities = localStorage.getItem(this.name);\n        if (entities === null) {\n            entities = \"[]\";\n        }\n        return JSON.parse(entities);\n    }\n\n    async getEntities(): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                let entities = await this.entityService.fetchEntities();\n\n                const localEntities = this.getEntitiesLocal();\n\n                const entMap = this.makeMap(entities);\n                const localEntMap = this.makeMap(localEntities);\n\n                const newEnts: T[] = [];\n                const localNewEnts: T[] = [];\n                const updates: T[] = [];\n\n                for (let localEnt of localEntities) {\n                    if (entMap[localEnt.id] !== undefined) {\n                        const localDate = new Date(localEnt.timestamp);\n                        const remoteDate = new Date(entMap[localEnt.id].timestamp);\n                        if (localDate > remoteDate) {\n                            updates.push(localEnt);\n                        } else {\n                            newEnts.push(entMap[localEnt.id]);\n                        }\n                    } else {\n                        localNewEnts.push(localEnt);\n                    }\n                }\n\n                for (let ent of entities) {\n                    if (localEntMap[ent.id] === undefined) {\n                        newEnts.push(ent);\n                    }\n                }\n\n                for (let localNew of localNewEnts) {\n                    await this.entityService.createEntity(localNew);\n                }\n                for (let localUp of updates) {\n                    await this.entityService.updateEntity(localUp);\n                }\n\n                entities = [\n                    ...newEnts,\n                    ...localNewEnts,\n                    ...updates\n                ];\n\n                this.storeEntities(entities);\n                return entities;\n            } catch (e) {\n            }\n        }\n        return this.getEntitiesLocal();\n    }\n\n    genId(): string {\n        return uuidv4();\n    }\n\n    async createEntity(entity: WithoutIdTimestamp<T>): Promise<string> {\n        const copy: T = {\n            id: this.genId(),\n            timestamp: (new Date()).toISOString(),\n            ...entity\n        } as any;\n\n        let created;\n        if (loginService.loggedIn()) {\n            try {\n                created = await this.entityService.createEntity(copy);\n            } catch (e) {\n                created = copy;\n            }\n        } else {\n            created = copy;\n        }\n\n        const localEntities = this.getEntitiesLocal();\n        localEntities.push(created);\n\n        this.storeEntities(localEntities);\n\n        return created.id;\n    }\n\n    async updateEntity(entity: T) {\n        entity.timestamp = (new Date()).toISOString();\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.updateEntity(entity);\n            } catch (e) {\n            }\n        }\n\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == entity.id) {\n                entities[i] = entity;\n                break;\n            }\n        }\n\n        this.storeEntities(entities);\n    }\n\n    getEntity(id: string): T | undefined {\n        const entities = this.getEntitiesLocal();\n\n        for (let i = 0; i < entities.length; i++) {\n            // eslint-disable-next-line\n            if (entities[i].id == id) {\n                return entities[i];\n            }\n        }\n\n        return undefined;\n    }\n\n    async deleteEntity(id: string): Promise<T[]> {\n        if (loginService.loggedIn()) {\n            try {\n                await this.entityService.deleteEntity(id);\n            } catch {\n            }\n        }\n        const notes = await this.getEntities();\n\n        for (let i = 0; i < notes.length; i++) {\n            // eslint-disable-next-line\n            if (notes[i].id == id) {\n                notes.splice(i, 1);\n                break;\n            }\n        }\n\n        this.storeEntities(notes);\n\n        return notes;\n    }\n\n    private makeMap(entities: T[]): {[key: string]: T} {\n        const ret: {[key: string]: T} = {};\n        for (let entity of entities) {\n            ret[entity.id] = entity;\n        }\n        return ret;\n    }\n}","import * as React from 'react';\n\nimport ReactMde, { commands, TextState, TextApi } from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { Note, colors, Color } from '../../util/types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faEyeDropper, faCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\n\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { previousLine, listRegExp, currentLine, lineStart } from '../../util/strs';\nimport { CommandGroup, GetIcon } from 'react-mde/lib/definitions/types';\nimport { noteService } from '../../util/note';\n\ntype Tab = 'write' | 'preview';\n\ninterface NoteState {\n    note: Note;\n    tab: Tab;\n    editTitle: boolean;\n}\n\nexport function colorClass(color: Color) {\n    return color;\n}\n\nexport class NoteComponent extends React.Component<{}, NoteState> {\n    input?: HTMLTextAreaElement;\n\n    commands: CommandGroup[] = [\n        ...commands.getDefaultCommands(),\n        {\n            commands: [\n                {\n                    name: 'Test',\n                    icon: (getIconFromProvider: GetIcon) => (\n                        <FontAwesomeIcon icon={faEyeDropper}/>\n                    ),\n                    children: colors.map(color => (\n                        {\n                            name: 'C1',\n                            icon: (getIconFromProvider: GetIcon) => (\n                                <span style={{color}}>\n                                    <FontAwesomeIcon icon={faCircle}/>\n                                </span>\n                            ),\n                            execute: (state: TextState, api: TextApi) => {\n                                this.setColor(color);\n                            }\n                        }))\n                }\n            ]\n        }\n    ];\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            note: {\n                markdown: '',\n                id: '',\n                name: 'Placeholder',\n                color: 'white',\n                timestamp: ''\n            },\n            tab: 'write',\n            editTitle: false\n        };\n    }\n\n    componentDidMount() {\n        const noteId = (this.props as any).match.params.noteId;\n\n        const note = noteService.getEntity(noteId);\n\n        if (note) {\n            this.setState({\n                note\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        let input = document.getElementsByClassName('mde-text');\n        if (input.length > 0 && !this.input) {\n            this.input = input[0] as HTMLTextAreaElement;\n\n            this.input.addEventListener('keydown', this.handleKeyPress.bind(this));\n        }\n    }\n\n    handleKeyPress(ev: KeyboardEvent) {\n        if (ev.key === 'Enter') {\n            setTimeout(() => {\n                this.handleEnter(ev);\n            }, 10);\n        } else if (ev.key === 'Tab') {\n            ev.preventDefault();\n            setTimeout(() => {\n                this.handleTab(ev);\n            }, 10);\n        }\n    }\n\n    handleTab(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const currLine = currentLine(note, position);\n        if (currLine) {\n            const match = currLine.match(listRegExp);\n            if (match) {\n                const start = lineStart(note, position);\n                if (ev.shiftKey) {\n                    if (match[1].length >= 4) {\n                        const newVal = [note.slice(0, start), note.slice(start+4)].join('');\n                        this.setValue(newVal);\n                        setTimeout(() => {\n                            (ev.target as any).selectionStart =  position - 4;\n                            (ev.target as any).selectionEnd =  position - 4;\n                        }, 0);\n                    }\n                } else {\n                    const newVal = [note.slice(0, start), '    ', note.slice(start)].join('');\n                    this.setValue(newVal);\n                    setTimeout(() => {\n                        (ev.target as any).selectionStart =  position + 4;\n                        (ev.target as any).selectionEnd =  position + 4;\n                    }, 0);\n                }\n            }\n        }\n    }\n\n    handleEnter(ev: KeyboardEvent) {\n        const position: number = (ev.target as any).selectionStart;\n\n        const note = this.state.note.markdown;\n\n        const prevLine = previousLine(note, position);\n        if (prevLine) {\n            const match = prevLine.match(listRegExp);\n            if (match) {\n                let str = match[1];\n                if (match[5] !== undefined) {\n                    str += `${parseInt(match[5]) + 1}. `\n                } else if (match[3] !== undefined) {\n                    str += `${match[3]} `;\n                }\n                if (match[6]) {\n                    str += `${match[6]} `;\n                }\n                const newVal = [note.slice(0, position), str, note.slice(position)].join('');\n                \n                this.setValue(newVal);\n                setTimeout(() => {\n                    (ev.target as any).selectionStart =  position + str.length;\n                    (ev.target as any).selectionEnd =  position + str.length;\n                }, 0);\n            }\n        }\n    }\n\n    setValue(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                markdown: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            markdown: value\n        });\n    }\n\n    setTab(tab: Tab) {\n        this.setState({\n            tab\n        });\n    }\n\n    setColor(color: Color) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                color\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            color\n        });\n    }\n\n    toggleEdit() {\n        this.setState({\n            editTitle: !this.state.editTitle\n        });\n    }\n\n    setName(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                name: value\n            }\n        });\n\n        noteService.updateEntity({\n            ...this.state.note,\n            name: value\n        });\n    }\n\n    editKeyUp(ev: React.KeyboardEvent) {\n        if (ev.nativeEvent.key === 'Enter') {\n            this.toggleEdit();\n        }\n    }\n\n    render() {\n        let title;\n        if (!this.state.editTitle) {\n            title = (\n                <div className=\"note-title\" onClick={() => this.toggleEdit()}>\n                    {this.state.note.name}\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            );\n        } else {\n            title = (\n                <div className=\"note-title\">\n                    <input value={this.state.note.name}\n                        onChange={val => this.setName(val.target.value)}\n                        onKeyUp={ev => this.editKeyUp(ev)}\n                        autoFocus={true}\n                        className=\"editName\"/>\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {title}\n                <ReactMde\n                    value={this.state.note.markdown}\n                    onChange={ev => this.setValue(ev)}\n                    selectedTab={this.state.tab}\n                    onTabChange={ev => this.setTab(ev)}\n                    generateMarkdownPreview={markdown =>\n                        Promise.resolve(\n                            <MarkDownWrap\n                                value={this.state.note.markdown}\n                                onChange={value => this.setValue(value)}/>\n                        )\n                    }\n                    commands={this.commands}\n                    classes={{\n                        textArea: colorClass(this.state.note.color),\n                        preview: colorClass(this.state.note.color)\n                    }}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport './style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\nimport { colorClass } from '../note/Note';\nimport { Color } from '../../util/types';\nimport { noteService } from '../../util/note';\n\ninterface NotePreviewProps {\n    id: string;\n    deleteClicked: (id: string) => void;\n}\n\ninterface NotePreviewState {\n    markdown: string;\n    name: string;\n    color: Color;\n}\n\nexport class NotePreview extends React.Component<NotePreviewProps, NotePreviewState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            markdown: '',\n            name: '',\n            color: 'white'\n        };\n\n        const note = noteService.getEntity(this.props.id);\n\n        if (note) {\n            this.state = {\n                markdown: note.markdown,\n                name: note.name,\n                color: note.color\n            };\n        }\n    }\n\n    delete(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.deleteClicked(this.props.id);\n    }\n\n    render() {\n        return (\n            <div className={`preview ${colorClass(this.state.color)}`}>\n                <div className=\"title\">\n                    {this.state.name}\n                    <span className=\"delete\" onClick={ev => this.delete(ev)}>\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </span>\n                </div>\n                <MarkDownWrap\n                    value={this.state.markdown}\n                    onChange={() => {}}/>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Note, NewNote, NoteType } from '../../util/types';\nimport { Route } from 'react-router-dom';\nimport { NotePreview } from '../note-preview/NotePreview';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faCheckSquare, faUser } from '@fortawesome/free-solid-svg-icons';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\nimport { noteService } from '../../util/note';\n\ninterface HomeState {\n    notes: Note[];\n    choosing: boolean;\n    loggedIn: boolean;\n}\n\nexport class Home extends React.Component<{}, HomeState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            notes: [],\n            choosing: false,\n            loggedIn: false\n        };\n    }\n\n    componentDidMount(){\n        noteService.getEntities().then(notes => {\n            this.setState({\n                notes\n            });\n        });\n\n        if (loginService.loggedIn()) {\n            this.setState({\n                loggedIn: true\n            });\n        }\n    }\n\n    async newNote(history: any, type: NoteType = 'empty') {\n        const note: NewNote = {\n            name: 'New Note',\n            markdown: type === 'empty' ? '' : '- [ ] ',\n            color: 'white'\n        }\n\n        const id = await noteService.createEntity(note);\n\n        history.push(`/note/${id}`);\n    }\n\n    toNote(id: string, history: any) {\n        history.push(`/note/${id}`);\n    }\n\n    deleteNote(id: string) {\n        noteService.deleteEntity(id).then(notes => {\n            this.setState({\n                notes: notes\n            });\n        });\n    }\n\n    login(history: any) {\n        history.push(`/login/`)\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"home\">\n                <table className=\"home\">\n                    <tbody>\n                        <tr className=\"actions\">\n                            <td className=\"actions\">\n                                <button className=\"pure-button mr-2\" onClick={() => this.newNote(history)}>\n                                    <FontAwesomeIcon icon={faPlus}/>\n                                </button>\n                                <button className=\"pure-button\" onClick={() => this.newNote(history, 'checklist')}>\n                                    <FontAwesomeIcon icon={faCheckSquare}/>\n                                </button>\n                                {!this.state.loggedIn ? (\n                                    <button className=\"pure-button login\" onClick={() => this.login(history)}>\n                                        <FontAwesomeIcon icon={faUser}/>\n                                    </button>\n                                    ) : <div></div>\n                                }\n                            </td>\n                        </tr>\n                        {this.state.notes.map(note => {\n                            return <tr className=\"note\" key={note.id}>\n                                <td className=\"note\" onClick={() => this.toNote(note.id, history)}>\n                                    <NotePreview id={note.id} deleteClicked={id => this.deleteNote(id)}/>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )} />;\n    }\n}","import * as React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport './style.css';\nimport { loginService } from '../../network/login.service';\n\nexport class Login extends React.Component<{}, {error?: string}> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {};\n    }\n\n    login(history: any, ev: React.FormEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        const email = (ev.target as any)[1].value;\n        const pw = (ev.target as any)[2].value;\n\n        loginService.login(email, pw).then(token => {\n            if (token !== undefined) {\n                history.push(`/`);\n            } else {\n                this.setState({\n                    error: 'Could not log in'\n                });\n            }\n        });\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"login\">\n                <form className=\"pure-form\"\n                        onSubmit={ev => this.login(history, ev)}>\n                    <fieldset>\n                        <legend>Login</legend>\n\n                        <input type=\"username\" placeholder=\"Username\"/>\n                        <input type=\"password\" placeholder=\"Password\"/>\n\n                        <button type=\"submit\" className=\"pure-button pure-button-primary\">\n                            Sign in\n                        </button>\n\n                        {this.state.error ? this.state.error : ''}\n                    </fieldset>\n                </form>\n            </div>\n        )} />;\n    }\n}","import React from 'react';\nimport { NoteComponent } from './components/note/Note';\n\nimport 'purecss/build/base-min.css';\nimport 'purecss/build/buttons-min.css';\nimport 'purecss/build/grids-responsive-min.css';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Home } from './components/home/Home';\nimport { Login } from './components/login/Login';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <div className=\"pure-g center\">\n        <div className=\"pure-u-1 pure-u-md-1-5\">\n        </div>\n        <div className=\"pure-u-1 pure-u-md-3-5\">\n          <Router>\n            <Switch>\n              <Route path=\"/note/:noteId\" component={NoteComponent}>\n              </Route>\n              <Route path=\"/login/\">\n                <Login />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
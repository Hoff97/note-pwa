{"version":3,"sources":["util/note.ts","components/checkbox/checkbox.tsx","components/mdWrap/MarkDownWrap.tsx","components/note/Note.tsx","components/note-preview/NotePreview.tsx","components/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["saveNotes","notes","localStorage","setItem","JSON","stringify","getNotes","getItem","parse","genId","length","id","saveNote","note","i","getNote","CheckBox","checked","onChange","children","className","type","ev","generateCheckbox","MarkDownWrap","props","renderListItem","undefined","console","log","lineIndex","sourcePosition","start","line","toggleCheckbox","defaultListItem","state","value","this","setState","lines","split","replace","setValue","join","source","renderers","listItem","rawSourcePos","React","NoteComponent","markdown","name","tab","editTitle","match","params","noteId","nativeEvent","key","toggleEdit","title","val","setName","target","onKeyUp","editKeyUp","autoFocus","icon","faPen","onClick","selectedTab","onTabChange","setTab","generateMarkdownPreview","Promise","resolve","NotePreview","preventDefault","stopPropagation","deleteClicked","delete","faTrash","Component","Home","context","choosing","history","push","newNote","splice","deleteNote","copy","copyNote","render","faPlus","map","toNote","App","path","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SAIO,SAASA,EAAUC,GACtBC,aAAaC,QAHO,QAGkBC,KAAKC,UAAUJ,IAGlD,SAASK,IACZ,IAAIL,EAAQC,aAAaK,QAPL,SAWpB,OAHc,OAAVN,IACAA,EAAQ,MAELG,KAAKI,MAAMP,GAGtB,SAASQ,EAAMR,GACX,OAAqB,IAAjBA,EAAMS,OACC,EAEAT,EAAMA,EAAMS,OAAS,GAAGC,GAAK,EAoBrC,SAASC,EAASC,GAGrB,IAFA,IAAMZ,EAAQK,IAELQ,EAAI,EAAGA,EAAIb,EAAMS,OAAQI,IAE9B,GAAIb,EAAMa,GAAGH,IAAME,EAAKF,GAAI,CACxBV,EAAMa,GAAKD,EACX,MAIRb,EAAUC,GAGP,SAASc,EAAQJ,GAGpB,IAFA,IAAMV,EAAQK,IAELQ,EAAI,EAAGA,EAAIb,EAAMS,OAAQI,IAE9B,GAAIb,EAAMa,GAAGH,IAAMA,EACf,OAAOV,EAAMa,G,4DClDlB,SAASE,EAAT,GAAmE,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,SAC1C,OACI,yBAAOC,UAAU,sBAAsBD,EACnC,yBAAOE,KAAK,WAAWJ,QAASA,EAASC,SAAU,SAAAI,GAAE,OAAIJ,EAASI,MAClE,wBAAMF,UAAU,wBCG5B,SAASG,EAAiBN,GACtB,OAAOA,EAAU,QAAU,QAIxB,IAAMO,EAAb,kDAgBI,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAhBVC,eAAiB,SAACD,GACd,GAAsB,OAAlBA,EAAMR,cAAsCU,IAAlBF,EAAMR,QAAuB,CACvDW,QAAQC,IAAIJ,GACZ,IAAMK,EAAYL,EAAMM,eAAeC,MAAMC,KAAO,EACpD,OACI,0BAAI,gBAACjB,EAAD,CACAC,QAASQ,EAAMR,QACfC,SAAU,SAAAI,GAAE,OAAI,EAAKY,eAAeZ,EAAIQ,EAAWL,EAAMR,UACzDE,SAAUM,EAAMN,YAI5B,OAAOgB,mBAAgBV,IAMvB,EAAKW,MAAQ,CACTC,MAAOZ,EAAMY,OAJG,EAhB5B,qDAwBaA,GACLC,KAAKC,SAAS,CACVF,UAGJC,KAAKb,MAAMP,SAASmB,KA7B5B,qCAgCmBf,EAAyCQ,EAAmBb,GACvE,IAAMuB,EAAQF,KAAKF,MAAMC,MAAMI,MAAM,MAErCD,EAAMV,GAAaU,EAAMV,GAAWY,QAChCnB,EAAiBN,GACjBM,GAAkBN,IAEtBqB,KAAKK,SAASH,EAAMI,KAAK,SAvCjC,+BA2CQ,OACI,gBAAC,IAAD,CAAeC,OAAQP,KAAKF,MAAMC,MAC9BS,UAAW,CAACC,SAAUT,KAAKZ,gBAC3BsB,cAAc,QA9C9B,GAAkCC,aCArBC,EAAb,kDACI,WAAYzB,GAAa,IAAD,8BACpB,cAAMA,IAEDW,MAAQ,CACTvB,KAAM,CACFsC,SAAU,GACVxC,IAAK,EACLyC,KAAM,eAEVC,IAAK,QACLC,WAAW,GAVK,EAD5B,gEAgBQ,IAEMzC,EAAOE,EAFGuB,KAAKb,MAAc8B,MAAMC,OAAOC,QAI5C5C,GACAyB,KAAKC,SAAS,CACV1B,WAtBhB,+BA2BawB,GACLC,KAAKC,SAAS,CACV1B,KAAK,eACEyB,KAAKF,MAAMvB,KADd,CAEAsC,SAAUd,MAIlBzB,EAAS,eACF0B,KAAKF,MAAMvB,KADV,CAEJsC,SAAUd,OArCtB,6BAyCWgB,GACHf,KAAKC,SAAS,CACVc,UA3CZ,mCAgDQf,KAAKC,SAAS,CACVe,WAAYhB,KAAKF,MAAMkB,cAjDnC,8BAqDYjB,GACJC,KAAKC,SAAS,CACV1B,KAAK,eACEyB,KAAKF,MAAMvB,KADd,CAEAuC,KAAMf,MAIdzB,EAAS,eACF0B,KAAKF,MAAMvB,KADV,CAEJuC,KAAMf,OA/DlB,gCAmEcf,GACqB,UAAvBA,EAAGoC,YAAYC,KACfrB,KAAKsB,eArEjB,+BAyEc,IACFC,EADC,OAyBL,OAbIA,EAVCvB,KAAKF,MAAMkB,UAWR,uBAAKlC,UAAU,cACX,yBAAOiB,MAAOC,KAAKF,MAAMvB,KAAKuC,KAC1BlC,SAAU,SAAA4C,GAAG,OAAI,EAAKC,QAAQD,EAAIE,OAAO3B,QACzC4B,QAAS,SAAA3C,GAAE,OAAI,EAAK4C,UAAU5C,IAC9B6C,WAAW,IACf,wBAAM/C,UAAU,QACZ,gBAAC,IAAD,CAAiBgD,KAAMC,QAf/B,uBAAKjD,UAAU,aAAakD,QAAS,kBAAM,EAAKV,eAC3CtB,KAAKF,MAAMvB,KAAKuC,KACjB,wBAAMhC,UAAU,QACZ,gBAAC,IAAD,CAAiBgD,KAAMC,QAmBnC,2BACKR,EACD,gBAAC,IAAD,CACIxB,MAAOC,KAAKF,MAAMvB,KAAKsC,SACvBjC,SAAU,SAAAI,GAAE,OAAI,EAAKqB,SAASrB,IAC9BiD,YAAajC,KAAKF,MAAMiB,IACxBmB,YAAa,SAAAlD,GAAE,OAAI,EAAKmD,OAAOnD,IAC/BoD,wBAAyB,SAAAvB,GAAQ,OAC7BwB,QAAQC,QACJ,gBAAC,EAAD,CAAcvC,MAAO,EAAKD,MAAMvB,KAAKsC,SACjCjC,SAAU,SAAAmB,GAAK,OAAI,EAAKM,SAASN,eA7GjE,GAAmCY,a,8CCHtB4B,G,OAAb,kDACI,WAAYpD,GAAa,IAAD,uBACpB,cAAMA,IAEDW,MAAQ,CACTe,SAAU,GACVC,KAAM,IAGV,IAAMvC,EAAOE,EAAQ,EAAKU,MAAMd,IARZ,OAUhBE,IACA,EAAKuB,MAAQ,CACTe,SAAUtC,EAAKsC,SACfC,KAAMvC,EAAKuC,OAbC,EAD5B,mDAmBW9B,GACHA,EAAGwD,iBACHxD,EAAGyD,kBACHzC,KAAKb,MAAMuD,cAAc1C,KAAKb,MAAMd,MAtB5C,+BAyBc,IAAD,OACL,OACI,yBAAKS,UAAU,WACX,yBAAKA,UAAU,SACVkB,KAAKF,MAAMgB,KACZ,0BAAMhC,UAAU,SAASkD,QAAS,SAAAhD,GAAE,OAAI,EAAK2D,OAAO3D,KAChD,kBAAC,IAAD,CAAiB8C,KAAMc,QAG/B,kBAAC,EAAD,CAAc7C,MAAOC,KAAKF,MAAMe,SAAUjC,SAAU,oBAlCpE,GAAiC+B,IAAMkC,YCH1BC,G,OAAb,kDACI,WAAY3D,EAAY4D,GAAe,IAAD,8BAClC,cAAM5D,EAAO4D,IAERjD,MAAQ,CACTnC,MAAO,GACPqF,UAAU,GALoB,EAD1C,gEAWQhD,KAAKC,SAAS,CACVtC,MAAOK,QAZnB,8BAgBYiF,GACJ,IAAM5E,ELTP,SAAiBwC,GACpB,IAAMlD,EAAQK,IAERO,EAAO,CACTF,GAAIF,EAAMR,GACVmD,KAAM,WACND,YAOJ,OAJAlD,EAAMuF,KAAK3E,GAEXb,EAAUC,GAEHY,EAAKF,GKJG8E,CAAQ,IAEnBF,EAAQC,KAAR,gBAAsB7E,MAnB9B,6BAsBWA,EAAY4E,GACfA,EAAQC,KAAR,gBAAsB7E,MAvB9B,iCA0BeA,GACP,IAAMV,ELwBP,SAAoBU,GAGvB,IAFA,IAAMV,EAAQK,IAELQ,EAAI,EAAGA,EAAIb,EAAMS,OAAQI,IAE9B,GAAIb,EAAMa,GAAGH,IAAMA,EAAI,CACnBV,EAAMyF,OAAO5E,EAAG,GAChB,MAMR,OAFAd,EAAUC,GAEHA,EKrCW0F,CAAWhF,GACzB2B,KAAKC,SAAS,CACVtC,MAAOA,MA7BnB,+BAiCaU,GACL,IAAMV,ELiCP,SAAkBU,GAGrB,IAFA,IAAMV,EAAQK,IAELQ,EAAI,EAAGA,EAAIb,EAAMS,OAAQI,IAE9B,GAAIb,EAAMa,GAAGH,IAAMA,EAAI,CACnB,IAAMiF,EAAO,CACTjF,GAAIF,EAAMR,GACVmD,KAAMnD,EAAMa,GAAGsC,KAAO,UACtBD,SAAUlD,EAAMa,GAAGqC,UAEvBlD,EAAMuF,KAAKI,GACX,MAMR,OAFA5F,EAAUC,GAEHK,IKnDWuF,CAASlF,GACvB2B,KAAKC,SAAS,CACVtC,MAAOA,MApCnB,+BAwCc,IAAD,OACL,OAAO,gBAAC,IAAD,CAAO6F,OAAQ,gBAAGP,EAAH,EAAGA,QAAH,OAClB,uBAAKnE,UAAU,QACX,yBAAOA,UAAU,QACb,6BACI,sBAAIA,UAAU,WACV,sBAAIA,UAAU,WACV,0BAAQA,UAAU,cAAckD,QAAS,kBAAM,EAAKmB,QAAQF,KACxD,gBAAC,IAAD,CAAiBnB,KAAM2B,SAIlC,EAAK3D,MAAMnC,MAAM+F,KAAI,SAAAnF,GAClB,OAAO,sBAAIO,UAAU,OAAOuC,IAAK9C,EAAKF,IAClC,sBAAIS,UAAU,OAAOkD,QAAS,kBAAM,EAAK2B,OAAOpF,EAAKF,GAAI4E,KACrD,gBAAC,EAAD,CAAa5E,GAAIE,EAAKF,GAAIqE,cAAe,SAAArE,GAAE,OAAI,EAAKgF,WAAWhF,qBAvDnG,GAA0BsC,cCuBXiD,MAvBf,WAEE,OACE,yBAAK9E,UAAU,aACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,2BAEf,yBAAKA,UAAU,0BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+E,KAAK,gBAAgBC,UAAWlD,IAEvC,kBAAC,IAAD,CAAOiD,KAAK,KACV,kBAAC,EAAD,aCjBIE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjD,MACvB,2DCZNkD,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxF,QAAQwF,MAAMA,EAAMC,a","file":"static/js/main.344eb420.chunk.js","sourcesContent":["import { Note } from \"./types\";\n\nconst localStorageKey = 'notes';\n\nexport function saveNotes(notes: Note[]) {\n    localStorage.setItem(localStorageKey, JSON.stringify(notes));\n}\n\nexport function getNotes(): Note[] {\n    let notes = localStorage.getItem(localStorageKey);\n    if (notes === null) {\n        notes = \"[]\";\n    }\n    return JSON.parse(notes);\n}\n\nfunction genId(notes: Note[]) {\n    if (notes.length === 0) {\n        return 0;\n    } else {\n        return notes[notes.length - 1].id + 1;\n    }\n}\n\nexport function newNote(markdown: string): number {\n    const notes = getNotes();\n\n    const note = {\n        id: genId(notes),\n        name: 'New note',\n        markdown\n    }\n\n    notes.push(note);\n\n    saveNotes(notes);\n\n    return note.id;\n}\n\nexport function saveNote(note: Note) {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == note.id) {\n            notes[i] = note;\n            break;\n        }\n    }\n\n    saveNotes(notes);\n}\n\nexport function getNote(id: number): Note | undefined {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == id) {\n            return notes[i];\n        }\n    }\n\n    return undefined;\n}\n\nexport function deleteNote(id: number): Note[] {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == id) {\n            notes.splice(i, 1);\n            break;\n        }\n    }\n\n    saveNotes(notes);\n\n    return notes;\n}\n\nexport function copyNote(id: number): Note[] {\n    const notes = getNotes();\n\n    for (let i = 0; i < notes.length; i++) {\n        // eslint-disable-next-line\n        if (notes[i].id == id) {\n            const copy = {\n                id: genId(notes),\n                name: notes[i].name + ' - Copy',\n                markdown: notes[i].markdown\n            };\n            notes.push(copy);\n            break;\n        }\n    }\n\n    saveNotes(notes);\n\n    return getNotes();\n}","import * as React from 'react';\n\nimport './style.css';\n\ninterface CheckboxProps {\n    checked: boolean;\n    children: JSX.Element[];\n    onChange: (change: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport function CheckBox({ checked, onChange, children }: CheckboxProps) {\n    return (\n        <label className=\"checkbox-container\">{children}\n            <input type=\"checkbox\" checked={checked} onChange={ev => onChange(ev)}/>\n            <span className=\"checkbox-checkmark\"></span>\n        </label>\n    );\n}","import * as React from 'react';\n\nimport ReactMarkdown from 'react-markdown';\n\n\nimport {listItem as defaultListItem} from 'react-markdown/lib/renderers';\nimport { CheckBox } from '../checkbox/checkbox';\n\ninterface MDState {\n    value: string;\n}\n\ninterface MDProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\nfunction generateCheckbox(checked: boolean) {\n    return checked ? '- [x]' : '- [ ]';\n}\n\n\nexport class MarkDownWrap extends React.Component<MDProps, MDState> {\n    renderListItem = (props: any) => {\n        if (props.checked !== null && props.checked !== undefined) {\n            console.log(props);\n            const lineIndex = props.sourcePosition.start.line - 1;\n            return (\n                <li><CheckBox\n                    checked={props.checked} \n                    onChange={ev => this.toggleCheckbox(ev, lineIndex, props.checked)}\n                    children={props.children}/></li>\n            );\n        }\n        // otherwise default to list item\n        return defaultListItem(props);\n      }\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            value: props.value\n        };\n    }\n\n    setValue(value: string) {\n        this.setState({\n            value\n        });\n\n        this.props.onChange(value);\n    }\n\n    toggleCheckbox(ev: React.ChangeEvent<HTMLInputElement>, lineIndex: number, checked: boolean) {\n        const lines = this.state.value.split('\\n');\n\n        lines[lineIndex] = lines[lineIndex].replace(\n            generateCheckbox(checked),\n            generateCheckbox(!checked)\n        );\n        this.setValue(lines.join('\\n'));\n    }\n\n    render() {\n        return (\n            <ReactMarkdown source={this.state.value}\n                renderers={{listItem: this.renderListItem}}\n                rawSourcePos={true}/>\n        );\n    }\n}","import * as React from 'react';\n\nimport ReactMde from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nimport { getNote, saveNote } from '../../util/note';\nimport { Note } from '../../util/types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\n\nimport './style.css';\n\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\n\ntype Tab = 'write' | 'preview';\n\ninterface NoteState {\n    note: Note;\n    tab: Tab;\n    editTitle: boolean;\n}\n\nexport class NoteComponent extends React.Component<{}, NoteState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            note: {\n                markdown: '',\n                id: -1,\n                name: 'Placeholder'\n            },\n            tab: 'write',\n            editTitle: false\n        };\n    }\n\n    componentDidMount() {\n        const noteId = (this.props as any).match.params.noteId;\n\n        const note = getNote(noteId);\n\n        if (note) {\n            this.setState({\n                note\n            });\n        }\n    }\n\n    setValue(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                markdown: value\n            }\n        });\n\n        saveNote({\n            ...this.state.note,\n            markdown: value\n        });\n    }\n\n    setTab(tab: Tab) {\n        this.setState({\n            tab\n        });\n    }\n\n    toggleEdit() {\n        this.setState({\n            editTitle: !this.state.editTitle\n        });\n    }\n\n    setName(value: string) {\n        this.setState({\n            note: {\n                ...this.state.note,\n                name: value\n            }\n        });\n\n        saveNote({\n            ...this.state.note,\n            name: value\n        });\n    }\n\n    editKeyUp(ev: React.KeyboardEvent) {\n        if (ev.nativeEvent.key === 'Enter') {\n            this.toggleEdit();\n        }\n    }\n\n    render() {\n        let title;\n        if (!this.state.editTitle) {\n            title = (\n                <div className=\"note-title\" onClick={() => this.toggleEdit()}>\n                    {this.state.note.name}\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            );\n        } else {\n            title = (\n                <div className=\"note-title\">\n                    <input value={this.state.note.name}\n                        onChange={val => this.setName(val.target.value)}\n                        onKeyUp={ev => this.editKeyUp(ev)}\n                        autoFocus={true}/>\n                    <span className=\"edit\">\n                        <FontAwesomeIcon icon={faPen}/>\n                    </span>\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {title}\n                <ReactMde\n                    value={this.state.note.markdown}\n                    onChange={ev => this.setValue(ev)}\n                    selectedTab={this.state.tab}\n                    onTabChange={ev => this.setTab(ev)}\n                    generateMarkdownPreview={markdown =>\n                        Promise.resolve(\n                            <MarkDownWrap value={this.state.note.markdown}\n                                onChange={value => this.setValue(value)}/>\n                        )\n                    }\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { getNote } from \"../../util/note\";\n\nimport './style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { MarkDownWrap } from '../mdWrap/MarkDownWrap';\n\ninterface NotePreviewProps {\n    id: number;\n    deleteClicked: (id:  number) => void;\n}\n\ninterface NotePreviewState {\n    markdown: string;\n    name: string\n}\n\nexport class NotePreview extends React.Component<NotePreviewProps, NotePreviewState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            markdown: '',\n            name: ''\n        };\n\n        const note = getNote(this.props.id);\n\n        if (note) {\n            this.state = {\n                markdown: note.markdown,\n                name: note.name\n            };\n        }\n    }\n\n    delete(ev: React.MouseEvent) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        this.props.deleteClicked(this.props.id);\n    }\n\n    render() {\n        return (\n            <div className=\"preview\">\n                <div className=\"title\">\n                    {this.state.name}\n                    <span className=\"delete\" onClick={ev => this.delete(ev)}>\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </span>\n                </div>\n                <MarkDownWrap value={this.state.markdown} onChange={() => {}}/>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Note } from '../../util/types';\nimport { Route } from 'react-router-dom';\nimport { getNotes, newNote, deleteNote, copyNote } from '../../util/note';\nimport { NotePreview } from '../note-preview/NotePreview';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nimport './style.css';\n\ninterface HomeState {\n    notes: Note[];\n    choosing: boolean;\n}\n\nexport class Home extends React.Component<{}, HomeState> {\n    constructor(props: any, context: any) {\n        super(props, context);\n\n        this.state = {\n            notes: [],\n            choosing: false\n        };\n    }\n\n    componentDidMount(){\n        this.setState({\n            notes: getNotes()\n        });\n    }\n\n    newNote(history: any) {\n        const id = newNote('');\n\n        history.push(`/note/${id}`)\n    }\n\n    toNote(id: number, history: any) {\n        history.push(`/note/${id}`)\n    }\n\n    deleteNote(id: number) {\n        const notes = deleteNote(id);\n        this.setState({\n            notes: notes\n        });\n    }\n\n    copyNote(id: number) {\n        const notes = copyNote(id);\n        this.setState({\n            notes: notes\n        });\n    }\n\n    render() {\n        return <Route render={({ history }) => (\n            <div className=\"home\">\n                <table className=\"home\">\n                    <tbody>\n                        <tr className=\"actions\">\n                            <td className=\"actions\">\n                                <button className=\"pure-button\" onClick={() => this.newNote(history)}>\n                                    <FontAwesomeIcon icon={faPlus}/>\n                                </button>\n                            </td>\n                        </tr>\n                        {this.state.notes.map(note => {\n                            return <tr className=\"note\" key={note.id}>\n                                <td className=\"note\" onClick={() => this.toNote(note.id, history)}>\n                                    <NotePreview id={note.id} deleteClicked={id => this.deleteNote(id)}/>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )} />;\n    }\n}","import React from 'react';\nimport { NoteComponent } from './components/note/Note';\n\nimport 'purecss/build/base-min.css';\nimport 'purecss/build/buttons-min.css';\nimport 'purecss/build/grids-responsive-min.css';\n\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Home } from './components/home/Home';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n      <div className=\"pure-g center\">\n        <div className=\"pure-u-1 pure-u-md-1-5\">\n        </div>\n        <div className=\"pure-u-1 pure-u-md-3-5\">\n          <Router>\n            <Switch>\n              <Route path=\"/note/:noteId\" component={NoteComponent}>\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}